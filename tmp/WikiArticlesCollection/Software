{{Other uses}}
{{Refimprove|date = September 2013}}
[[File:Agile-Molecule-modeling.png|thumb|A piece of software designed to assist in the modeling of molecules]]

'''Computer software''', or just '''software''', is any set of machine-readable instructions that directs a computer's [[computer processor|processor]] to perform specific operations. The term is used to contrast with [[computer hardware]], the physical objects (processor and related devices) that carry out the instructions. Computer hardware and software require each other and neither can be realistically used without the other.

Software is a general term. It can refer to all computer instructions in general, or to any specific set of computer instructions. It is inclusive of both [[machine code|machine instructions]] (the [[binary code]] that the processor "understands") and [[source code]] (more human-understandable instructions that must be rendered into machine code by [[compiler]]s or [[interpreter]]s before being executed).

Computer software is a set of ''[[Computer program|program]]s, [[procedure (computer science)|procedure]]s, [[function (computer science)|function]]s, [[associated data]]'' and/or its ''documentation, ''if any. Program software performs the [[Function (engineering)|function]] of the [[Computer program|program]] it implements, either by directly providing [[instruction (computer science)|instructions]] to the [[digital electronics]] or by serving as an input to another piece of software. Software is also sometimes used in a more narrow sense, meaning [[application software]] only.

Computer software is so called to distinguish it from [[computer hardware]], which encompasses the physical devices and interconnections required to store and run ("execute") the software. In contrast to hardware, executable software exists as data in the computer system and hence "cannot be touched", just as the 3D model shown in the illustration cannot be touched.<ref>{{cite web
| title = Wordreference.com: WordNet 2.0
| publisher = Princeton University, Princeton, NJ
| url = http://www.wordreference.com/definition/software
| accessdate = 2007-08-19 }}</ref> At the lowest level, executable code consists of machine language instructions specific to an individual processor. A [[Machine code|machine language]] consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location inside the computer (an effect that is not directly observable to the user), or (indirectly) cause something to appear on a display of the computer system (a state change which should be visible to the user). The processor carries out the instructions in the order they are provided, unless it is instructed to "jump" to a different instruction, or interrupted.

Software is usually written in [[high-level programming language]]s that are easier and more efficient for humans to use (closer to [[natural language]]) than machine language.<ref>{{cite web|title=Compiler construction|url=http://www.cs.uu.nl/education/vak.php?vak=INFOMCCO}}</ref>  High-level languages are compiled or interpreted into machine language object code. Software may also be written in an [[assembly language]], essentially, a [[mnemonic]] representation of a machine language using a natural language alphabet. Assembly language must be assembled into object code via an [[Assembly language|assembler]].

== History ==
{{main|History of software}}

== Types of software ==

<imagemap>Image:Operating system placement.svg|thumb|A layer structure showing where the [[operating system]] software and [[application software]] are situated while running on a typical [[desktop computer]]
rect 1 1 250 90 [[User (computing)|User]]
rect 1 91 250 180 [[Application software|Application]]
rect 1 181 250 270 [[Operating system|Operating System]]
rect 1 271 250 360 [[Personal computer hardware|Hardware]]

</imagemap>
Software encompasses a wide array of products that may be developed using different techniques such as ordinary [[programming language]]s, [[microcode]], or an [[Field-programmable gate array|FPGA]] configuration{{citation needed|date = September 2013}}.

On virtually all computer platforms, software can be grouped into a few broad categories:
* [[System software]] is [[computer software]] designed to operate the [[computer hardware]], to provide basic functionality, and to provide a platform for running [[application software|application software.]]<ref>{{cite web|title=System Software|url=http://home.olemiss.edu/~misbook/sfsysfm.htm|publisher=The University of Mississippi}}</ref>  System software includes [[device driver]]s, [[operating system]]s, [[server (computing)|servers]], [[software utility|utilities]], and [[window system]]s.
** System software also includes the [[Booting|boot]] [[firmware]], which loads (or in some cases constitutes) the operating system. Firmware is software that has been permanently stored in hardware (specifically, in [[non-volatile memory]]). Thus, it has qualities of both software and hardware, but it is still software.
* [[Application software]] and [[Script (computer programming)|scripts]] were historically defined as all the software that uses the computer system to perform useful work (or [[video game|entertainment functions]]) beyond the basic operation of the computer itself. However, in practice the distinction between system software and application software is often blurred due to bundling of useful applications with the operating system.
** Application software includes [[desktop applications]] such as [[web browser]]s and [[Microsoft Office]], as well as [[smartphone]] and [[Tablet computer|tablet]] applications (called "[[mobile app|apps]]").
** [[Javascript]] scripts are pieces of software traditionally embedded in [[web pages]] that are run directly inside the [[web browser]] when a web page is loaded, without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into Javascript, or if a web browser plugin that supports that language is installed; the most common example of the latter is [[ActionScript]] scripts, which are supported by the [[Adobe Flash]] plugin.
** [[Web applications]] usually run on the [[web server]] and output dynamically-generated web pages to web browsers, using e.g. [[PHP]], [[Java (programming language)|Java]] or [[ASP.NET]], or even [[Node.js|Javascript that runs on the server]]; in modern times they commonly include some Javascript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser.
* [[Plug-in (computing)|Plugins]] and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function;
* [[Embedded software]] resides as firmware within [[embedded systems]], devices dedicated to a single use or a few uses such as [[cars]] and [[televisions]] (although some embedded devices such as wireless chipsets can ''themselves'' be part of an ordinary, non-embedded computer system such as a PC or [[smartphone]]).<ref>{{cite web|title=Embedded Softwareâ€”Technologies and Trends|url=http://www.computer.org/csdl/mags/so/2009/03/mso2009030014.html|publisher=IEEE Computer Society|accessdate=May/June 2009}}</ref>  In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run [[embedded operating systems]], and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed, application which is always ran).
* [[Microcode]] is a special, relatively obscure type of embedded software which tells the processor ''itself'' how to execute machine code, so it is actually a lower level than machine code.<ref>{{cite web|title=Microcode|url=http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Microcode.html|publisher=Princeton University}}</ref>  It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it.

=== Programming tools ===
{{Main|Programming tool}}

Programming tools are software in the form of programs or applications that [[software developers]] (also known as ''programmers, coders, hackers'' or ''software engineers'') use to create, [[Debugging|debug]], [[Software maintenance|maintain]] (i.e. improve or fix), or otherwise [[Technical support|support]] software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as [[compiler]]s, [[debugger]]s, [[interpreter (computing)|interpreters]], [[linker (computing)|linkers]], and [[text editor]]s, that can be combined together to accomplish a task, much as one might use multiple hand tools to fix a physical object, or they may be an [[integrated development environment]] (IDE), which combines much or all of the functionality of such self-contained tools. An IDE may do this either by invoking the relevant individual tools on behalf of the programmer, or by reimplementing their functionality in a new way. Almost all programming language implementations (a notable exception being [[Smalltalk]]) provide the option of using individual tools rather than an IDE, because some programmers prefer not to use IDEs for various reasons, and IDEs usually take longer to be developed to an "acceptable" standard than individual tools - indeed, initially, new programming languages (which are created every year) would not typically have IDEs available for them.

== Software topics ==

=== Architecture ===
{{See also|Software architecture}}
Users often see things differently than programmers. People who use modern general purpose computers (as opposed to [[embedded system]]s, [[analog computer]]s and [[supercomputer]]s) usually see three layers of software performing a variety of tasks: platform, application, and user software.

* Platform software: [[Platform (computing)|Platform]] includes the [[firmware]], [[device driver]]s, an [[operating system]], and typically a [[graphical user interface]] which, in total, allow a user to interact with the computer and its [[peripheral]]s (associated equipment). Platform software often comes bundled with the computer. On a [[Personal computer|PC]] you will usually have the ability to change the platform software.
* Application software: [[Application software]] or Applications are what most people think of when they think of software. Typical examples include office suites and video games. [[Application software]] is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications.
* User-written software: [[End-user development]] tailors systems to meet users' specific needs. User software include spreadsheet templates and [[word processor]] templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers.

=== Execution ===
{{main|Execution (computing)}}

Computer software has to be "loaded" into the [[computer storage|computer's storage]] (such as the [[hard drive]] or [[Computer memory|memory]]). Once the software has loaded, the computer is able to ''execute'' the software. This involves passing [[instruction (computer science)|instructions]] from the [[application software]], through the system software, to the hardware which ultimately receives the instruction as [[machine language|machine code]]. Each instruction causes the computer to carry out an operation&nbsp;â€“ moving [[data (computing)|data]], carrying out a [[computation]], or altering the [[control flow]] of instructions.

Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.
<!-- This section is simply to long for this article and needs to be compressed into the intro above, or moved to the article itself ....
Instructions may be performed sequentially, conditionally, or iteratively. Sequential instructions are those operations that are performed one after another. Conditional instructions are performed such that different sets of instructions execute depending on the value(s) of some data. In some languages this is known as an "if" statement. Iterative instructions are performed repetitively and may depend on some data value. This is sometimes called a "loop." Often, one instruction may "call" another set of instructions that are defined in some other program or [[module (programming)|module]]. When more than one computer processor is used, instructions may be executed simultaneously.

A simple example of the way software operates is what happens when a user selects an entry such as "Copy" from a menu. In this case, a conditional instruction is executed to copy text from data in a 'document' area residing in memory, perhaps to an intermediate storage area known as a 'clipboard' data area. If a different menu entry such as "Paste" is chosen, the software may execute the instructions to copy the text from the clipboard data area to a specific location in the same or another document in memory.

Depending on the application, even the example above could become complicated. The field of software engineering endeavors to manage the complexity of how software operates. This is especially true for software that operates in the context of a large or powerful [[computer system]].

Currently, almost the only limitations on the use of computer software in applications is the ingenuity of the designer/programmer. Consequently, large areas of activities (such as playing grand master level chess) formerly assumed to be incapable of software simulation are now routinely programmed. The only area that has so far proved reasonably secure from software simulation is the realm of human artâ€” especially, pleasing music and literature.{{Citation needed|date=June 2007}}

Kinds of software by operation: [[computer program]] as [[executable]], [[source code]] or [[script (computer programming)|script]], [[computer configuration|configuration]].-->

=== Quality and reliability ===
{{main|Software quality|Software testing|Software reliability}}

Software quality is very important, especially for [[commercial software|commercial]] and system software like [[Microsoft Office]], [[Microsoft Windows]] and [[Linux]]. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "[[Software bug|bugs]]." Many bugs are discovered and eliminated (debugged) through [[software testing]]. However, software testing rarely&nbsp;â€“ if ever&nbsp;â€“ eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law). All major software companies, such as Microsoft, Novell and [[Sun Microsystems]], have their own software testing departments with the specific goal of just testing. Software can be tested through [[unit testing]], [[regression testing]] and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, [[NASA]] has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA based operations interact and identify each other through command programs called software. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.

=== License ===
{{main|Software license}}

The software's license gives the user the right to use the software in the licensed environment. Some software comes with the license when purchased off the shelf, or an OEM license when bundled with hardware. Other software comes with a [[free software license]], granting the recipient the rights to modify and redistribute the software. Software can also be in the form of [[freeware]] or [[shareware]].

=== Patents ===
{{main|Software patent|Software patent debate}}

Software can be patented in some but not all countries; however, [[software patent]]s can be controversial in the software industry with many people holding different views about it. The controversy over software patents is about specific [[algorithm]]s or techniques that the software contains, which may not be duplicated by others and considered [[intellectual property]] and [[copyright infringement]] depending on the severity.

== Design and implementation ==
[[File:81Dojo screenshot.jpg|thumb|A screenshot of a piece of computer software that implements the board game [[shogi]] with a graphical user interface]]
{{main|Software development|Computer programming|Software engineering}}
Design and implementation of software varies depending on the complexity of the software. For instance, design and creation of [[Microsoft Word]] software will take much more time than designing and developing [[Microsoft Notepad]] because of the difference in functionalities in each one.

Software is usually designed and created (coded/written/programmed) in [[integrated development environment]]s (IDE) like [[Eclipse (software)|Eclipse]], [[Emacs]] and [[Microsoft Visual Studio]] that can simplify the process and [[compiler|compile]] the program. As noted in different section, software is usually created on top of existing software and the [[application programming interface]] (API) that the underlying software provides like [[GTK+]], JavaBeans or [[Swing (Java)|Swing]]. Libraries (APIs) are categorized for different purposes. For instance, [[JavaBeans]] library is used for designing [[enterprise application]]s, [[Windows Forms]] library is used for designing graphical user interface (GUI) applications like [[Microsoft Word]], and [[Windows Communication Foundation]] is used for designing [[web service]]s. Underlying [[computer programming]] [[concept]]s like [[quicksort]], [[hash table]], [[array data type|array]], and [[binary tree]] can be useful to creating software. When a program is designed, it relies on the API. For instance, if a user is designing a Microsoft Windows desktop application, he/she might use the [[.NET Framework|.NET]] Windows Forms library to design the desktop application and call its APIs like ''Form1.Close()'' and ''Form1.Show()''<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/default.aspx | title=MSDN Library|accessdate=2010-06-14}}</ref> to close or open the application and write the additional operations him/herself that it need to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like [[Sun Microsystems]], [[Novell]], and [[Microsoft]] provide their own APIs so that many applications are written using their [[software library|software libraries]] that usually have numerous APIs in them.

Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.{{Specify|Which characteristics?|date=May 2012}}<ref>{{cite journal|author=v. Engelhardt, Sebastian |year=2008|url=http://ideas.repec.org/p/jrp/jrpwrp/2008-045.html |title=The Economic Properties of Software|journal= Jena Economic Research Papers| volume= 2| issue= 2008â€“045.}}
</ref><ref>
{{cite web|url=http://dankaminsky.com/1999/03/02/69/ |title=Why Open Source Is The Optimum Economic Paradigm for Software|first= Dan |last=Kaminsky |year=1999}}
</ref>

A person who creates software is called a [[programmer]], [[software engineer]] or [[software developer]], terms that all have a similar meaning.

== Industry and organizations ==
{{main|Software industry}}

A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: [[Bill Gates]], the founder of [[Microsoft]] was the richest person in the world in 2009 largely by selling the [[Microsoft Windows]] and [[Microsoft Office]] software products. The same goes for [[Larry Ellison]], largely through his [[Oracle database]] software. Through time the software industry has become increasingly specialized.

Non-profit software organizations include the [[Free Software Foundation]], [[GNU Project]] and [[Mozilla Foundation]]. Software standard organizations like the [[W3C]], [[IETF]] develop software standards so that most software can interoperate through standards such as [[XML]], [[HTML]], [[HTTP]] or [[FTP]].

Other well-known large software companies include [[Novell]], [[SAP AG|SAP]], [[Symantec]], [[Adobe Systems]], and [[Corel]], while small companies often provide innovation.

== See also ==
{{portal|Software|Free software|Information technology}}
* [[Software release life cycle]]
* [[List of software]]

{{-}}

== References ==
{{reflist}}

== External links ==
{{Commons}}
{{Wiktionary|software}}
{{Wikiversity | Computer Software}}
{{Wikivoyage|Software for travellers}}

* [[wikia:software|Software Wikia]]
* [http://www.dmoz.org/Computers/Software/ Software in Open Directory Project]

{{DEFAULTSORT:Computer Software}}
[[Category:Software| ]]