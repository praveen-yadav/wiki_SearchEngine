[[File:Client-server-model.svg|thumb|A [[computer network diagram]] of clients communicating with a server via the [[Internet]]. Both the clients and the server are [[Node (networking)|nodes]] (communication points) on the [[Computer network|network]]. The arrangement of the nodes in a network is called the ''[[network topology]]''.]]

The '''client–server model''', or '''client–server architecture''', is an approach to [[computer network programming]] in which [[computer]]s in a [[Computer network|network]] assume one of two roles: The [[Server (computing)|server]] selectively shares its [[Resource (computer science)|resource]]s, and the [[Client (computing)|client]] initiates contact with a server in order to use those resources.<ref name="Padlipsky">{{cite IETF |title=A Perspective on the ARPANET Reference Model |rfc=871 |last=Padlipsky |first=Michael A. |authorlink=Michael A. Padlipsky |year=1982 |month=September |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=30 November 2013}}</ref>

The client–server model is prevalent in computer networks. [[Email]], [[network printing]], and the [[World Wide Web]] all apply the client–server model.

==How clients and servers communicate==
Clients and servers exchange messages in a [[request-response]] [[messaging pattern]]: The client sends a request, and the server returns a response. This exchange of messages is an example of [[inter-process communication]]. To communicate, the computers must have a common language, and they must follow rules so that both the client and the server know what to expect. The language and rules of communication are defined in a [[communications protocol]]. All client-server protocols operate in the [[application layer]]. The application-layer protocol defines the basic patterns of the dialogue. To formalize exchange data even further, the server may implement an [[Application programming interface|API]] (such as a [[web service]]).<ref>{{Cite doi/10.1109.2FMIC.2004.1260703}}</ref> The API is an [[abstraction layer]] for such resources as databases and [[custom software]]. By restricting communication to a specific [[content format]], it facilitates [[parsing]]. By abstracting access, it facilitates [[cross-platform]] data exchange.<ref>{{Cite doi/10.1504.2FIJWGS.2005.007545}}</ref>

A server may receive requests from many different clients in a very short period of time. Because the computer can perform a limited number of [[Task (computing)|tasks]] at any moment, it relies on a [[Scheduling (computing)|scheduling]] system to prioritize incoming requests from clients in order to accommodate them all in turn. To prevent abuse and maximize [[uptime]], the server's [[software]] limits how a client can use the server's resources. Even so, a server is not immune from abuse. A [[denial of service attack]] exploits a server's obligation to process requests by bombarding it with requests incessently. This inhibits the server's ability to responding to legitimate requests.

===What does a server serve?===
Servers are classified by the services they provide. A [[web server]] serves [[web page]]s; a [[file server]] serves [[computer file]]s. However, by requesting a web page or a file, a client implicitly makes use of the server's resources, like memory, [[CPU cycle]]s, and software. A ''resource'' is virtually any of the computer's software and electronic components, from [[Computer program|programs]] and [[Data (computing)|data]] to [[Microprocessor|processors]] and [[Data storage device|storage devices]]. Collectively, shared resources on a server constitute a ''service''.

Because the service is an [[Abstraction (computer science)|abstraction]] of computer resources, the client does not have to be concerned with how the server formulates a response. The client only has to understand the response—which it can do because the client and server use the same communications protocols. Communications protocols are the languages computers use to communicate over a network. The data transmitted in this way is divided into units called ''[[network packet]]s''. In addition to the data itself (the [[Payload (computing)|payload]]), each packet is encoded with information essential for transmission, such as the source and destination. Because network packets don't exceed a maximum size, the payload may either be the entire message or just a part of it.

==The roles of client and server==
Whether a computer is a client, a server, or both, it can serve multiple functions. For example, a single computer can run web server and file server software at the same time to serve different data to clients making different kinds of requests. Client software can also communicate with server software within the same computer.<ref>The [[X Window System]] is one example.</ref> Communication between servers, such as to synchronize data, is sometimes called ''[[inter-server]]'' or ''server-to-server'' communication.

===Real-world example===
When a [[bank]] customer accesses [[online banking]] services with a [[web browser]] (the client), she initiates a request to the bank's web server. Since the customer's [[login]] credentials are stored in a [[database]], the web server runs a program to access a [[database server]]. This database server may, in turn, fetch [[financial transaction]] records from another database server. An [[application server]] interprets the returned data by following the bank's [[business logic]], and provides the [[Input/output|output]] to the web server. Finally, the web server sends the result to the web browser, which interprets the data.

Each server listed above acts as a client when it submits data in a request to another server for processing. In each step of this sequence of client–server message exchanges, a computer processes a request and returns data. This is the request-response messaging pattern. When all the requests are met, the sequence is complete and the web browser presents the data to the customer.

This example illustrates a [[design pattern]] applicable to the client–server model: [[Separation of concerns]].

==Early history==
While formulating the client–server model in the 1960s and 1970s, [[computer scientist]]s at [[Xerox]] and [[Xerox PARC]] in California used the terms ''server-host'' (or ''serving host'') and ''user-host'' (or ''using-host'').<ref name="rulifson">{{cite IETF |title=DEL |rfc=5 |last=Rulifson |first=Jeff |authorlink=Jeff Rulifson |year=1969 |month=June |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=30 November 2013}}</ref><ref>{{cite IETF |title=Network Timetable |rfc=4 |last=Shapiro |first=Elmer B. |year=1969 |month=March |publisher=[[Internet Engineering Task Force|IETF]] |accessdate=30 November 2013}}</ref>

One context in which researchers used these terms was in the design of a [[computer network programming]] language called Decode-Encode Language (DEL).<ref name="rulifson"/> The purpose of this language was to accept commands from one computer (the user-host), which would return status reports to the user as it encoded the commands in network packets. Another DEL-capable computer, the server-host, received the packets, decoded them, and returned formatted data to the user-host. A DEL program on the user-host received the results to present to the user. This is a client–server transaction. Development of DEL was just beginning in 1969, the year that the [[United States Department of Defense]] established [[ARPANET]] (predecessor of [[Internet]]).

===Client-host and server-host===
''Client-host'' and ''server-host'' have subtly different meanings than ''client'' and ''server''. A [[Host (network)|host]] is any computer connected to a network. Whereas the words ''server'' and ''client'' may refer either to a computer or to a computer program, ''server-host'' and ''user-host'' always refer to computers. The host is a versatile, multifunction computer; ''clients'' and ''servers'' are just programs that run on a host. In the client–server model, a server is more likely to be devoted to the task of serving.

An early use of the word ''client'' occurs in "Separating Data from Function in a Distributed File System", a 1978 paper by Xerox PARC computer scientists Howard Sturgis, James Mitchell, and Jay Israel. The authors are careful to define the term for readers, and explain that they use it to distinguish between the user and the user's network node (the client).<ref>{{Cite journal |last = Sturgis |first = Howard E. |last2 = Mitchell |first2 = James George |last3 = Israel | first3 = Jay E. |chapter = Separating Data from Function in a Distributed File System |journal= |publisher=[[Xerox PARC]] |chapterurl=http://ip.com/IPCOM/000128883 |year = 1978}}</ref> (By 1992, the word ''server'' had entered into general parlance.)<ref>{{OEtymD|server|accessdate=30 November 2013}}</ref><ref>{{cite web |url=https://getinfo.de/app/Separating-data-from-function-in-a-distributed/id/TIBKAT%3A509976956 |title=Separating data from function in a distributed file system |author=<!--Staff writer(s); no by-line.--> |website=[[GetInfo]] |publisher=[[German National Library of Science and Technology]] |accessdate=29 November 2013}}</ref>

The concepts of ''server-host'' and ''user-host'' predate the [[Internet protocol suite]]. In the early 1980s, there were several variations of the network-layer model, which is now standardized as the [[OSI model]]. One of these, the ARPANET Reference Model,<ref name="Padlipsky"/> is a host-oriented model that combines the [[network layer]] and the [[transport layer]] into a host-to-host communication layer.

==Centralized computing==
{{Further|Decentralized computing|History of personal computers}}

[[Centralized computing]] applies the client–server model to offload most computation to a single computer in a network, such as a [[Mainframe computer|mainframe]] or [[minicomputer]]. The more computation is offloaded to the central computer, the simpler the client hosts can be.<ref name="Columbia">{{cite journal |last = Nieh |first = Jason |last2 = Novik |first2 = Naomi |last3 = Yang |first3 = S. Jae |title = A Comparison of Thin-Client Computing Architectures |journal = Technical Report CUCS-022-00 |publisher = Network Computing Laboratory, [[Columbia University]] |location = New York |date = December 2005 |url = http://www.nomachine.com/documentation/pdf/cucs-022-00.pdf |accessdate = 30 November 2013}}</ref>

A [[thin client]] has few resources other than [[input device]]s and [[output device]]s.<ref name="tolia">{{Cite journal |last = Tolia |first = Niraj |last2 = Andersen |first2 = David G. |last3 = Satyanarayanan |first3 = M. |title = Quantifying Interactive User Experience on Thin Clients |journal = [[Computer (magazine)|Computer]] |volume = 39 |number = 3 |date = March 2006 |publisher = [[IEEE Computer Society]] |url = http://www.cs.cmu.edu/~dga/papers/tolia06-ieee.pdf |format=PDF}}</ref> It relies heavily on network resources (servers and infrastructure) for computation and storage. A [[diskless node]] loads even its [[operating system]] from the network, and a [[computer terminal]] has no operating system at all; it is only an input/output interface to the server. In contrast, a [[fat client]], such as a [[personal computer]], has many resources, and does not rely on a server for essential functions.

As [[microcomputer]]s decreased in price and increased in power from the 1980s to the late 1990s, many organizations transitioned computation from centralized servers to fat clients.<ref>{{Cite doi/10.1145.2F800041.801417}}</ref> This afforded greater, more individualized dominion over computer resources, but complicated [[information technology management]].<ref name="Columbia"/><ref name="tolia"/><ref>{{cite web |url=http://sqlmag.com/cloud/cloud-really-just-return-mainframe-computing |title=Is the Cloud Really Just the Return of Mainframe Computing? |last=Otey |first=Michael |date=22 March 2011 |website=[[SQL Server Pro]] |publisher=[[Penton Media]] |accessdate=1 December 2013}}</ref> During the 2000s, [[web application]]s matured enough to rival [[application software]] developed for a specific [[microarchitecture]]. This maturation, inexpensive [[mass storage]], and the advent of [[service-oriented architecture]] were among the factors that gave rise to the [[cloud computing]] trend of the 2010s.<ref>{{Cite doi/10.1109.2FMITP.2006.123}}</ref>

==Comparison with peer-to-peer architecture==
{{Main|Peer-to-peer}}
{{See also|Reliability engineering|single point of failure}}
In modern applications of the client-server model, the server is often designed to be a centralized system that serves many clients. The more simultaneous clients a server has, the more resources it needs. In a [[peer-to-peer]] network, two or more computers (called ''peers'') pool their resources and communicate in a [[decentralized system]]. Peers are coequal [[Node (networking)|nodes]] in a non-hierarchical network. Collectively, lesser-powered computers can share the load and provide [[Redundancy (engineering)|redundancy]].

Since most peers are personal [[information appliance]]s, their shared resources may not be available consistently. Although an individual node may have variable [[uptime]], the resource remains available as long as one or more other nodes offer it. As the availability of nodes changes, an application-layer protocol reroutes requests.

The client–server and peer-to-peer models alike are used in [[distributed computing]] applications.

==See also==
{{Columns-list|2|
* [[Client–queue–client]]
* [[Observer pattern]]
* [[Publish–subscribe pattern]]
* [[Pull technology]]
* [[Push technology]]
* [[Remote procedure call]]
* [[Standalone server]]
}}

==Notes==
{{Reflist}}

{{DEFAULTSORT:Client-server model}}
[[Category:Application layer protocols| ]]
[[Category:Clients (computing)| ]]
[[Category:Servers (computing)| ]]
[[Category:Network architecture]]