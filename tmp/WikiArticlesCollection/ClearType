'''ClearType''' is  [[Microsoft]]'s implementation of [[subpixel rendering]] technology in rendering text in a [[font]] system. ClearType attempts to improve the appearance of text on certain types of [[computer display]] screens by sacrificing color fidelity for additional intensity variation. This trade-off is asserted to work well on [[LCD]] [[flat panel]] monitors.

ClearType was first announced at the November 1998 [[COMDEX]] exhibition. The technology was first introduced in software in January 2000<ref>{{cite web|url=http://www.microsoft.com/typography/links/news.aspx?NID=1135|title=First ClearType screens posted|publisher=Microsoft Typography|date=2000-01-26|accessdate=2008-03-20}}</ref> as an always-on feature of [[Microsoft Reader]], which was released to the public in August 2000.

==Background==
Computer displays where the positions of individual pixels are permanently fixed—such as most modern [[flat panel]] displays—can show saw-tooth edges when displaying small, high-contrast graphic elements, such as text. ClearType uses [[spatial anti-aliasing]] at the subpixel level to reduce visible artifacts on such displays when text is rendered, making the text appear "smoother" and less jagged. ClearType also uses very heavy [[font hinting]] to force the font to fit into the pixel grid. This increases edge contrast and readability of small fonts at the expense of font rendering fidelity and has been criticized by graphic designers for making different fonts look similar.

Like most other types of subpixel rendering, ClearType involves a compromise, sacrificing one aspect of image quality (color or ''[[chrominance]]'' detail) for another (light and dark or ''[[luminance]]'' detail). The compromise can improve text appearance when luminance detail is more important than chrominance.

Only user and system applications render application of ClearType. ClearType does not alter other graphic display elements (including text already in [[bitmap]]s)). For example, ClearType enhancement renders text on the screen in [[Microsoft Office Word|Microsoft Word]], but text placed in a bitmapped image in a program such as [[Photoshop|Adobe Photoshop]] is not. In theory, the method (called "RGB Decimation" internally) can enhance the anti-aliasing of any digital image.<ref>Betrisey et al., "Displaced Filtering for Patterned Displays", Proc. Society for Information Display Symposium, 2000</ref>

ClearType is not used when printing text. Most printers already use such small pixels that aliasing is rarely a problem, and they don't have the addressable fixed subpixels ClearType requires. Nor does ClearType  affect text stored in files. ClearType only applies any processing to the text while it is being rendered onto the screen.

ClearType was invented in the Microsoft e-Books team by Bert Keely and Greg Hitchcock.  It was then analyzed by researchers in the company, and signal processing expert [[John Platt (Principal Researcher)|John Platt]] designed an improved version of the algorithm.<ref>Platt, J.C., "Optimal Filtering for Patterned Displays", IEEE Signal Processing Letters, 7(7) 2000</ref>  [[Dick Brass]], a Vice President at Microsoft from 1997 to 2004, complained that the company was slow in moving ClearType to market in the portable computing field.<ref>[http://www.nytimes.com/2010/02/04/opinion/04brass.html?pagewanted=1&ref=opinion Microsoft’s Creative Destruction]</ref>

==How ClearType works==
Normally, the software in a computer treats the computer’s display screen as a rectangular array of square, indivisible [[pixel]]s, each of which has an intensity and color that are determined by the blending of three [[primary color]]s: red, green, and blue. However, actual display hardware usually implements each pixel as a group of three adjacent, independent ''[[subpixel]]s,'' each of which displays a different primary color. Thus, on a real computer display, each pixel is actually composed of separate red, green, and blue subpixels. For example, if a flat-panel display is examined under a magnifying glass, the pixels may appear as follows:

[[Image:27 subpixels.svg|center|Subpixels|thumb]]

In the illustration above, there are nine pixels but 27 subpixels.

If the computer controlling the display knows the exact position and color of all the subpixels on the screen, it can take advantage of this to improve the apparent resolution in certain situations. If each pixel on the display actually contains three rectangular subpixels of red, green, and blue, in that fixed order, then things on the screen that are smaller than one full pixel in size can be rendered by lighting only one or two of the subpixels. For example, if a diagonal line with a width smaller than a full pixel must be rendered, then this can be done by lighting only the subpixels that the line actually touches. If the line passes through the leftmost portion of the pixel, only the red subpixel is lit; if it passes through the rightmost portion of the pixel, only the blue subpixel is lit. This effectively triples the horizontal resolution of the image at normal viewing distances; the drawback is that the line thus drawn will show color fringes (at some points it might look green, at other points it might look red or blue).

[[Image:Antialias-vrs-Cromapixel.svg|center|frame|1) A diagonal line on a 1-bit display. 2) Grayscale anti-aliasing. 3) Identical to 1, but on a color monitor. 4) Rendered with direct control of each color subpixel. 5) Smaller version of 1-4. 6) 1 pixel lines without and with anti-aliasing.]]

ClearType uses this method to improve the smoothness of text. When the elements of a type character are smaller than a full pixel, ClearType lights only the appropriate subpixels of each full pixel in order to more closely follow the outlines of that character. Text rendered with ClearType looks “smoother” than text rendered without it, provided that the pixel layout of the display screen exactly matches what ClearType expects.

The following picture shows a 4× enlargement of the word ''Wikipedia'' rendered using ClearType.
The word was originally rendered using a [[Times New Roman]] 12 [[Point (typography)|pt]] [[typeface|font]].

:[[Image:Wikipedia ClearType.png|center|frame|The word "Wikipedia" rendered using ClearType]]

In this magnified view, it becomes clear that, while the overall smoothness of the text seems to improve, there is also color fringing of the text.

[[Image:ClearTypePixels.svg|thumb|center|283px| (a) text rendered without ClearType and (b) text rendered with ClearType]]

An extreme close-up of a color display shows (a) text rendered without ClearType and (b) text rendered with ClearType. Note the changes in subpixel intensity that are used to increase effective resolution when ClearType is enabled—without ClearType, all sub-pixels of a given pixel have the same intensity.

[[Image:Cleartype-vs-Standard-Antialiasing.gif|center| (a) text rendered without ClearType and (b) text rendered with ClearType]]

In the above lines of text, when the orange circle is shown, all the text in the frame is rendered using Cleartype (RGB subpixel rendering); when the orange circle is absent all the text is rendered using normal (full pixel greyscale) anti-aliasing.

==ClearType and human vision==
ClearType and similar technologies work on the theory that variations in intensity are more noticeable than variations in color. Thus, when ClearType sacrifices color accuracy in order to increase luminance detail, the overall effect—as seen by human eyes—should be an improvement for most people.{{Citation needed|date=August 2008}}

According to [[MSDN]] website,<ref>[http://msdn.microsoft.com/en-us/library/aa970267.aspx Windows Presentation Foundation ClearType Registry Settings]</ref> Microsoft acknowledges that "[t]ext that is rendered with ClearType can also appear significantly different when viewed by individuals with varying levels of color sensitivity. Some individuals can detect slight differences in color better than others."

This opinion is shared<ref>{{cite web|url=http://www.typophile.com/node/33005#comment-197028 |title=ClearType, in XP and Vista |publisher=Typophile |date= |accessdate=2010-01-22}}</ref> by the font designer [[Thomas Phinney]], program manager for fonts and core technologies at [[Adobe Systems]]:<ref>{{cite web|url=http://www.myfonts.com/person/phinney/thomas/ |title=Thomas Phinney |publisher=MyFonts |date=1999-02-22 |accessdate=2010-01-22}}</ref> "There is also considerable variation between individuals in their sensitivity to color fringing. Some people just notice it and are bothered by it a lot more than others."

The hinting expert [[Beat Stamm]], who worked on ClearType at Microsoft,<ref>{{cite web|url=http://www.myfonts.com/person/stamm/beat/ |title=Beat Stamm |publisher=MyFonts |date=1999-02-22 |accessdate=2010-01-22}}</ref> agrees that ClearType may look blurry at [[Dots per inch#Computer monitor DPI standards|96 dpi]], which was a typical<ref>{{cite web|url=http://dictionary.zdnet.com/definition/Dpi.html |title=Dpi: Definition and additional resources from ZDNet |publisher=Dictionary.zdnet.com |date= |accessdate=2010-01-22}}</ref> resolution for [[LCD]]s in 2008, but adds that higher resolution displays improve on this aspect:<ref>{{cite web|url=http://www.typophile.com/node/33005#comment-197660 |title=ClearType, in XP and Vista |publisher=Typophile |date= |accessdate=2010-01-22}}</ref>

{{quote|WPF [Windows Presentation Foundation] uses method C [ClearType with fractional pixel positioning<ref>{{cite web|url=http://www.beatstamm.com/typography/RTRCh3.htm#Sec32 |title=Fractional Advance Widths |publisher=The Raster Tragedy at Low-Resolution Revisited |date=2011-03-14 |accessdate=2011-03-17}}</ref>], but few display devices have a sufficiently high resolution to make the potential blur a moot point for everybody.&nbsp;.&nbsp;.&nbsp;. Some people are ok with the blur in Method C, some aren’t. Anecdotal evidence suggests that some people are fine with Method C when reading continuous text at 96 dpi (e.g. Times Reader, etc.) but not in UI scenarios. Many people are fine with the colors of ClearType, even at 96 dpi, but a few aren’t… To my eyes and at 96 dpi, Method C doesn’t read as well as Method A. It reads “blurrily” to me. Conversely, at 144 dpi, I don’t see a problem with Method C. It looks and reads just fine to me.}}

[[Image:FontSmoothingExample.gif|center| Text without rendering (upper portion) and text with ClearType rendering (lower portion)]]

In the above block of text, the same portion of text is shown in the upper half without and in the lower half with ClearType rendering (as opposed to Standard and ClearType in the previous image).

This and the previous example with the orange circle demonstrate the blurring introduced.  For many observers this blurring is beneficial; others do not find  ClearType beneficial.  According to a study at the University of Texas,<ref>http://www.ischool.utexas.edu/~ct/chi_p618.pdf</ref> ClearType "may not be universally beneficial".  The study notes that maximum benefit may be seen when the information worker is spending large proportions of their time reading text (which is not necessarily the case for the majority of computer users today).  Additionally, over one third of the study participants experienced some disadvantage when using ClearType.  Whether ClearType, or other rendering, should be used is very subjective and it must be the choice of the individual, with the report recommending "to allow users to disable [ClearType] if they find it produces effects other than improved performance".

==Display requirements==
ClearType and allied technologies require display hardware with fixed pixels and subpixels. More precisely, the positions of the pixels and subpixels on the screen must be exactly known to the computer to which it is connected. This is the case for flat-panel displays, on which the positions of the pixels are permanently fixed by the design of the screen itself. Almost all flat panels have a perfectly rectangular array of square pixels, each of which contains three rectangular subpixels in the three primary colors, with the normal ordering being red, green, and blue, arranged in vertical bands. ClearType assumes this arrangement of pixels when rendering text.

ClearType does not work properly with flat-panel displays that are operated at resolutions other than their “native” resolutions, since only the native resolution corresponds exactly to the actual positions of pixels on the screen of the display.

If a display does not have the type of fixed pixels that ClearType expects, text rendered with ClearType enabled actually looks worse than type rendered without it. Some flat panels have unusual pixel arrangements, with the colors in a different order, or with the subpixels positioned differently (in three horizontal bands, or in other ways). ClearType needs to be manually tuned for use with such displays (see below).

Displays that have no fixed pixel positions, such as [[shadow mask]] [[cathode ray tube|CRT]] displays, may be harder to read if ClearType is enabled. However, on CRT displays with a similar pixel arrangement as flat-panel displays, such as [[aperture grille]] CRT displays, it can result in a slightly improved readability.<ref>{{cite web|title=ClearType FAQ|url=http://www.microsoft.com/typography/cleartypefaq.mspx|publisher=Microsoft}}</ref>

==Sensitivity to display orientation==
Because ClearType utilizes the physical layout of the red, green and blue [[pigments]] of the LCD screen, it is sensitive to the orientation of the display.

ClearType in [[Windows XP]] currently supports the [[RGB]] and [[BGR (subpixels)|BGR]] sub pixel structures. Rotated displays, in which the subpixels are arranged vertically rather than horizontally, are ''not'' currently supported. Using ClearType on these display configurations will actually reduce the display quality. The best option for users of Windows XP having rotated LCD displays ([[Microsoft Tablet PC|Tablet PCs]] or swivel-stand LCD displays) is using regular anti-aliasing, or switching off font-smoothing altogether.

The software developer documentation for [[Windows CE]] states that ClearType for rotated screens is supported on that platform.<ref>[http://msdn2.microsoft.com/en-us/library/ms901093.aspx Working with ClearType Fonts<!-- Bot generated title -->]</ref>

Vertical sub pixel structures are not supported in Windows XP.<ref>[http://www.brandonfurtwangler.com/?p=54 Tablets and cleartype, and a requested feature of Avalon at Brandon Furtwangler blog]</ref>

==Implementations==
* [[Microsoft Reader]]
* [[Windows XP]] (off by default)
* [[Windows Vista]] (on by default)
* [[Windows 7]] (on by default)
* [[Microsoft Office 2007]] and later (on by default)
* [[Internet Explorer 7]] and later (on by default)
* [[Windows Live Messenger]] (on by default)
* [[Windows 8]]: Only used in Windows 8 Desktop and all desktop apps.<ref>[http://www.istartedsomething.com/20120303/cleartype-takes-a-back-seat-for-windows-8-metro/ ClearType takes a back seat for Windows 8 Metro]</ref>

ClearType is also an integrated component of the [[Windows Presentation Foundation]] text-rendering engine.

===ClearType in GDI===
ClearType can be globally enabled or disabled for [[Graphics Device Interface|GDI]] applications. A control panel applet is available to let the users tune the GDI ClearType settings. The GDI implementation of ClearType does not support sub-pixel positioning.<ref>[http://msdn.microsoft.com/en-us/library/ms749295.aspx Windows Presentation Foundation ClearType Overview]</ref>

===ClearType tuning===
Some versions of [[Microsoft Windows]], as supplied, allow ClearType to be turned on or off, with no adjustment; other versions allow tuning of the ClearType parameters. A Microsoft ClearType tuner utility is available for free download for Windows versions lacking this facility.<ref>{{cite web | url = http://www.microsoft.com/typography/ClearTypePowerToy.mspx | title = Microsoft's ClearType Tuner PowerToy | accessdate = 2007-09-27}}</ref> If ClearType is disabled in the operating system, applications with their own ClearType controls can still support it. [[Microsoft Reader]] (for [[e-book]]s) has its own ClearType tuner.

===ClearType in WPF===
All text in [[Windows Presentation Foundation]] is anti-aliased and rendered using ClearType. There are separate ClearType registry settings for GDI and WPF applications, but by default the WPF entries are absent, and the GDI values are used in their absence. WPF registry entries can be tuned using the instructions<ref>[http://blogs.msdn.com/text/archive/2006/10/18/tips-for-improving-your-wpf-text-rendering-experience.aspx Tips for improving your WPF text rendering experience]</ref> from the MSDN WPF Text Blog.

ClearType in WPF supports sub-pixel positioning, natural advance widths, Y-direction anti-aliasing and [[hardware acceleration]]. WPF supports aggressive caching of pre-rendered ClearType text in [[video memory]].<ref>[http://msdn2.microsoft.com/en-us/library/ms749295.aspx MSDN Library : .NET Development : WPF : ClearType Overview]</ref> The extent to which this is supported is dependent on the [[video card]]. [[DirectX]] 10 cards will be able to cache the font glyphs in [[video memory]], then perform the composition (assembling of character glyphs in the correct order, with the correct spacing), [[alpha blending]] (application of anti-aliasing), and RGB blending (ClearType's sub-pixel color calculations), entirely in hardware. This means that only the original glyphs need to be stored in video memory once per font (Microsoft estimates that this would require 2 MB of video memory per font), and other operations such as the display of anti-aliased text on top of other graphics&nbsp;— including video&nbsp;— can also be done with no computation effort on the part of the CPU. DirectX 9 cards will only be able to cache the alpha-blended glyphs in memory, thus requiring the CPU to handle glyph composition and alpha-blending before passing this to the video card.  Caching these partially rendered glyphs requires significantly more memory (Microsoft estimates 5 MB per process). Cards that don't support DirectX 9 have no hardware-accelerated text rendering capabilities.

===ClearType in DirectWrite===
The font rendering engine in [[DirectWrite]] supports rendering to sub-pixel positions, as demonstrated at [[Professional Developers Conference|PDC]] 2008.<ref name=DirectWrite>{{cite web|url=http://channel9.msdn.com/pdc2008/PC18|title=PC18: Introducing Direct2D and DirectWrite|author=Kam VedBrat, Leonardo Blanco|publisher=Microsoft|date=2008-10-28}}</ref>

==Patents==
ClearType is a [[registered trademark]] and the technology is protected by the following U.S. patents:
<!--
Dead link. Now redirects to generic IP page.
<ref name="msip">
{{cite web|url=http://www.microsoft.com/iplicensing/productDetail.aspx?productTitle=ClearType|title=Microsoft Intellectual Property and Licensing: ClearType|accessdate=2008-12-02}}
</ref>
-->
* Subpixel rendering:
** {{US patent|6188385}} – ''Method and apparatus for displaying images such as text''
** {{US patent|6219025}} – ''Mapping image data samples to pixel sub-components on a striped display device''
** {{US patent|6239783}} – ''Weighted mapping of image data samples to pixel sub-components on a display device''
** {{US patent|6307566}} – ''Methods and apparatus for performing image rendering and rasterization operations''
* Complex color filtering:
** {{US patent|6225973}} – ''Mapping samples of foreground/background color image data to pixel sub-components''
** {{US patent|6243070}} – ''Method and apparatus for detecting and reducing color artifacts in images''
** {{US patent|6393145}} – ''Methods apparatus and data structures for enhancing the resolution of images to be rendered on patterned display devices''
* Subpixel font hinting and layout:
** {{US patent|6421054}} – ''Methods and apparatus for performing grid fitting and hinting operations''
** {{US patent|6282327}} – ''Maintaining advance widths of existing characters that have been resolution enhanced''
* ClearType tuning:
** {{US patent|6624828}} – ''Method and apparatus for improving the quality of displayed images through the use of user reference information''

==Other uses for ClearType==
The ClearType name was also referred to the screens of [[Microsoft Surface]] tablets. ClearType HD Display includes a 1366x768 screen, while ClearType Full HD Display includes a 1920x1080 screen.<ref>[http://www.anandtech.com/show/6377/inside-microsofts-surface-rt-tablet Inside Microsoft's Surface RT Tablet]</ref><ref>[http://www.anandtech.com/show/6015/microsofts-major-announcement-in-la-were-there Microsoft's Major Announcement in LA - We're There!]</ref>

==See also==
* [[Font rasterization]]
* [[FreeType]]
* [[OpenType]]
* [[Apple Advanced Typography]]
* [[Subpixel rendering]]
* Adobe [[CoolType]], a similar technology
* [[Quartz (graphics layer)]]

==References==
{{Reflist|30em}}

==External links==
{{external links|date=May 2012}}
* [http://blogs.msdn.com/b/e7/archive/2009/06/23/engineering-changes-to-cleartype-in-windows-7.aspx ClearType on Windows 7 - with comments by users]
* [http://www.microsoft.com/typography/cleartypepowertoy.mspx ClearType Tuner PowerToy for Windows XP and Vista] from Microsoft
* [http://www.microsoft.com/typography/cleartype/tuner/Step1.aspx ClearType Tuner webpage for  accessing ClearType without downloading the PowerToy]
* [http://www.microsoft.com/typography/WhatIsClearType.mspx Explanation of ClearType] at Microsoft Typography
* [http://research.microsoft.com/en-us/projects/cleartype/ Technical Overview of ClearType Filtering] from Microsoft Research
* [http://www.grc.com/cleartype.htm Sub-Pixel Font Rendering Technology]: History and Technique Explanation by [[Steve Gibson (computer programmer)|Steve Gibson]], includes free downloadable Windows demo.
* [http://everything2.com/?node_id=1232071 sample implementation] in the C language by Damian Yerrick of [[Everything2]]
* '[http://research.microsoft.com/apps/pubs/?id=68631 Displaced Filtering for Patterned Displays]' by Platt et al.: a research paper detailing ClearType's techniques
* [http://channel9.msdn.com/Showpost.aspx?postid=146749 A video about the ClearType team and the typography in Windows Vista] at [[Channel 9 (discussion forum)|Channel 9]]
* [http://tamsppc.tamoggemon.com/2007/07/24/cleartype-and-landscape-mode-why-it-cannot-work/  ClearType and landscape mode - why it CANNOT work]: A look at why ClearType can't work in landscape mode on a PocketPC
* [http://www.microsoft.com/typography/ClearTypeFonts.mspx Microsoft ClearType Font Collection] at Microsoft Typography
* [http://www.microsoft.com/downloads/details.aspx?familyid=048DC840-14E1-467D-8DCA-19D2A8FD7485&displaylang=en Download Microsoft ClearType Font Collection] Download Microsoft PowerPoint Viewer 2007 which includes the ClearType Collection

{{Windows Components}}

{{DEFAULTSORT:Cleartype}}
[[Category:Windows components]]
[[Category:Microsoft Windows]]
[[Category:Digital typography]]
[[Category:Computer graphics algorithms]]