{{about||an introduction to the subject|Boolean algebra#Boolean algebras|the elementary syntax and axiomatics of the subject|Boolean algebra|an alternative presentation|Boolean algebras canonically defined}}
{{Merge from|two-element Boolean algebra|discuss=Wikipedia_talk:BATF#Two-element_Boolean_algebra|date=April 2011}}
{{insufficient inline citations|date=July 2013}}
In [[abstract algebra]], a '''Boolean algebra''' or '''Boolean lattice''' is a [[complemented lattice|complemented]] [[distributive lattice|distributive]] [[lattice (order)|lattice]]. This type of [[algebraic structure]] captures essential properties of both [[Set (mathematics)|set]] operations and [[logic]] operations. A Boolean algebra can be seen as a generalization of a [[power set]] algebra or a [[field of sets]], or its elements can be viewed as generalized [[truth value]]s. It is also a special case of a [[De Morgan algebra]] and a [[Kleene algebra]].

A [[Boolean ring]] is essentially the same thing as a Boolean algebra, with ring multiplication corresponding to [[logical conjunction|conjunction]] or [[meet (mathematics)|meet]] ∧, and ring addition to [[exclusive or|exclusive disjunction]] or [[symmetric difference]] (not [[logical disjunction|disjunction]] ∨).

[[Image:Hasse diagram of powerset of 3.svg|thumb|right|250px|Boolean lattice of subsets]]
__TOC__

==History==  <!-- [[Boolean algebra (history)]] redirects here -->

The term "Boolean algebra" honors [[George Boole]] (1815–1864), a self-educated English mathematician. He introduced the [[algebraic system]] initially in a small pamphlet, ''The Mathematical Analysis of Logic'', published in 1847 in response to an ongoing public controversy between [[Augustus De Morgan]] and [[Sir William Hamilton, 9th Baronet|William Hamilton]], and later as a more substantial book, ''[[The Laws of Thought]]'', published in 1854. Boole's formulation differs from that described above in some important respects. For example, conjunction and disjunction in Boole were not a dual pair of operations. Boolean algebra emerged in the 1860s, in papers written by [[William Jevons]] and [[Charles Sanders Peirce]]. The first systematic presentation of Boolean algebra and [[distributive lattice]]s is owed to the 1890 ''Vorlesungen'' of [[Ernst Schröder]]. The first extensive treatment of Boolean algebra in English is [[A. N. Whitehead]]'s 1898 ''Universal Algebra''. Boolean algebra as an axiomatic algebraic structure in the modern axiomatic sense begins with a 1904 paper by [[Edward V. Huntington]]. Boolean algebra came of age as serious mathematics with the work of [[Marshall Stone]] in the 1930s, and with [[Garrett Birkhoff]]'s 1940 ''Lattice Theory''. In the 1960s, [[Paul Cohen (mathematician)|Paul Cohen]], [[Dana Scott]], and others found deep new results in [[mathematical logic]] and [[axiomatic set theory]] using offshoots of Boolean algebra, namely [[forcing (mathematics)|forcing]] and [[Boolean-valued model]]s.

== Definition ==

A '''Boolean algebra''' is a six-[[tuple]] consisting of a [[Set (mathematics)|set]] ''A'', equipped with two [[binary operation]]s ∧ (called "meet" or "and"), ∨ (called "join" or "or"), a [[unary operation]] ¬ (called "complement" or "not") and two elements 0 and 1 (called "bottom" and "top", or "least" and "greatest" element, also denoted by the symbols ⊥ and ⊤, respectively), such that for all elements ''a'', ''b'' and ''c'' of ''A'', the following [[axioms]] hold:<ref>Davey, Priestley, 1990, p.109, 131, 144</ref>

::{| cellpadding=5
|''a'' ∨ (''b'' ∨ ''c'') = (''a'' ∨ ''b'') ∨ ''c''
|''a'' ∧ (''b'' ∧ ''c'') = (''a'' ∧ ''b'') ∧ ''c''
| [[associativity]]
|-
|''a'' ∨ ''b'' = ''b'' ∨ ''a''
|''a'' ∧ ''b'' = ''b'' ∧ ''a''
| [[commutativity]]
|-
|''a'' ∨ (''a'' ∧ ''b'') = ''a''
|''a'' ∧ (''a'' ∨ ''b'') = ''a''
| [[Absorption law|absorption]]
|-
|''a'' ∨ 0 = ''a''
|''a'' ∧ 1 = ''a''
| [[identity element|identity]]
|-
|''a'' ∨ (''b'' ∧ ''c'') = (''a'' ∨ ''b'') ∧ (''a'' ∨ ''c'')&nbsp;&nbsp;
|''a'' ∧ (''b'' ∨ ''c'') = (''a'' ∧ ''b'') ∨ (''a'' ∧ ''c'')&nbsp;&nbsp;
| [[distributivity]]
|-
|''a'' ∨ ¬''a'' = 1
|''a'' ∧ ¬''a'' = 0
| [[complemented lattice|complements]]
|}

A Boolean algebra with only one element is called a '''trivial Boolean algebra''' or a '''degenerate Boolean algebra'''. (Some authors require 0 and 1 to be ''distinct'' elements in order to exclude this case.) 

It follows from the last three pairs of axioms above (identity, distributivity and complements) that
::''a'' = ''b'' ∧ ''a'' &nbsp;&nbsp;&nbsp; if and only if &nbsp;&nbsp;&nbsp; ''a'' ∨ ''b'' = ''b''.
The relation ≤ defined by ''a'' ≤ ''b'' if these equivalent conditions hold, is a [[partial order]] with least element 0 and greatest element 1. The meet ''a'' ∧ ''b'' and the join ''a'' ∨ ''b'' of two elements coincide with their [[infimum]] and [[supremum]], respectively, with respect to ≤.

The first four pairs of axioms constitute a definition of a [[bounded lattice]].

It follows from the first five pairs of axioms that any complement is unique.

The set of axioms is [[duality (order theory)|self-dual]] in the sense that if one exchanges ∨ with ∧ and 0 with 1 in an axiom, the result is again an axiom. Therefore by applying this operation to a Boolean algebra (or Boolean lattice), one obtains another Boolean algebra with the same elements; it is called its '''dual'''.{{cn|reason=last clause used in lattice theory, not in Boolean algebras|date=September 2013}}

== Examples ==

* The simplest non-trivial Boolean algebra, the [[two-element Boolean algebra]], has only two elements, 0 and 1, and is defined by the rules:
{|
|-
| width="70" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ∧ || 0 || 1
|-
! 0
| 0 || 0
|-
! 1
| 0 || 1
|}
|
| width="30" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ∨ || 0 || 1
|-
! 0
| 0 || 1
|-
! 1
| 1 || 1
|}
|
| width="40" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ''a'' || 0 || 1
|-
! ¬''a''
| 1 || 0
|}
|}

:* It has applications in [[logic]], interpreting 0 as ''false'', 1 as ''true'', ∧ as ''and'', ∨ as ''or'', and ¬ as ''not''. Expressions involving variables and the Boolean operations represent statement forms, and two such expressions can be shown to be equal using the above axioms if and only if the corresponding statement forms are [[logical equivalence|logically equivalent]].

:* The two-element Boolean algebra is also used for circuit design in [[electrical engineering]]; here 0 and 1 represent the two different states of one [[bit]] in a [[digital circuit]], typically high and low [[voltage]]. Circuits are described by expressions containing variables, and two such expressions are equal for all values of the variables if and only if the corresponding circuits have the same input-output behavior. Furthermore, every possible input-output behavior can be modeled by a suitable Boolean expression.

:* The two-element Boolean algebra is also important in the general theory of Boolean algebras, because an equation involving several variables is generally true in all Boolean algebras if and only if it is true in the two-element Boolean algebra (which can be checked by a trivial [[brute force search|brute force]] algorithm for small numbers of variables). This can for example be used to show that the following laws (''Consensus theorems'') are generally valid in all Boolean algebras:
:** (''a'' ∨ ''b'') ∧ (¬''a'' ∨ ''c'') ∧ (''b'' ∨ ''c'') ≡ (''a'' ∨ ''b'') ∧ (¬''a'' ∨ ''c'')
:** (''a'' ∧ ''b'') ∨ (¬''a'' ∧ ''c'') ∨ (''b'' ∧ ''c'') ≡ (''a'' ∧ ''b'') ∨ (¬''a'' ∧ ''c'')

* The [[power set]] (set of all subsets) of any given nonempty set ''S'' forms a Boolean algebra, an [[algebra of sets]], with the two operations ∨ := ∪ (union) and ∧ := ∩ (intersection). The smallest element 0 is the [[empty set]] and the largest element 1 is the set ''S'' itself.

:* After the two-element Boolean algebra, the simplest Boolean algebra is that defined by the [[power set]] of two atoms:
{|
|-
| width="70" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ∧ || 0 || a || b || 1
|-
! 0
| 0 || 0 || 0 || 0 
|-
! a
| 0 || a || 0 || a
|-
! b
| 0 || 0 || b || b
|-
! 1
| 0 || a || b || 1
|}
|
| width="30" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ∨ || 0 || a || b || 1
|-
! 0
| 0 || a || b || 1
|-
! a
| a || a || 1 || 1
|-
! b
| b || 1 || b || 1
|-
! 1
| 1 || 1 || 1 || 1
|}
|
| width="40" |
|
{| class="wikitable" border="1" cellpadding="4" cellspacing="0"
|-
! ''x'' || 0 || a || b || 1
|-
! ¬''x''
| 1 || b || a || 0
|}
|}

* The set of all subsets of ''S'' that are either finite or [[cofinite]] is a Boolean algebra, an [[algebra of sets]].

* Starting with the [[propositional calculus]] with κ sentence symbols, form the [[Lindenbaum-Tarski algebra|Lindenbaum algebra]] (that is, the set of sentences in the propositional calculus modulo [[tautology (logic)|tautology]]).  This construction yields a Boolean algebra.  It is in fact the [[free Boolean algebra]] on κ generators.  A truth assignment in propositional calculus is then a Boolean algebra homomorphism from this algebra to the two-element Boolean algebra.
* Given any [[linearly ordered]] set ''L'' with a least element, the interval algebra is the smallest algebra of subsets of ''L'' containing all of the half-open intervals [''a'', ''b'') such that ''a'' is in ''L'' and ''b'' is either in ''L'' or equal to ∞.  Interval algebras are useful in the study of [[Lindenbaum-Tarski algebra]]s; every countable Boolean algebra is isomorphic to an interval algebra.

[[File:T 30.svg|thumb|x150px|[[Hasse diagram]] of the Boolean algebra of divisors of 30.]]
* For any [[natural number]] ''n'', the set of all positive [[divisor]]s of ''n'', defining ''a''≤''b'' if ''a'' [[divides]] ''b'', forms a [[distributive lattice]]. This lattice is a Boolean algebra if and only if ''n'' is [[square-free integer|square-free]]. The bottom and the top element of this Boolean algebra is the natural number 1 and ''n'', respectively. The complement of ''a'' is given by ''n''/''a''. The meet and the join of ''a'' and ''b'' is given by the [[greatest common divisor]] (gcd) and the [[least common multiple]] (lcm) of ''a'' and ''b'', respectively. The ring addition ''a''+''b'' is given by lcm(''a'',''b'')/gcd(''a'',''b''). The picture shows an example for ''n'' = 30. As a counter-example, considering the non-square-free ''n''=60, the greatest common divisor of 30 and its complement 2 would be 2, while it should be the bottom element 1.

* Other examples of Boolean algebras arise from [[topology|topological spaces]]: if ''X'' is a topological space, then the collection of all subsets of ''X'' which are both open and closed forms a Boolean algebra with the operations ∨ := ∪ (union) and ∧ := ∩ (intersection).

* If ''R'' is an arbitrary [[mathematical ring|ring]] and we define the set of ''central idempotents'' by <br> ''A'' = { ''e'' ∈ ''R'' : ''e''<sup>2</sup> = ''e'', ''ex'' = ''xe'', ∀''x'' ∈ ''R'' } <br> then the set ''A'' becomes a Boolean algebra with the operations ''e'' ∨ ''f'' := ''e'' + ''f'' - ''ef'' and ''e'' ∧ ''f'' := ''ef''.

== Homomorphisms and isomorphisms ==
<!-- "Boolean homomorphism" redirects here -->

A ''[[homomorphism]]'' between two Boolean algebras ''A'' and ''B'' is a [[function (mathematics)|function]] ''f'' : ''A'' → ''B'' such that for all ''a'', ''b'' in ''A'':

: ''f''(''a'' ∨ ''b'') = ''f''(''a'') ∨ ''f''(''b''),
: ''f''(''a'' ∧ ''b'') = ''f''(''a'') ∧ ''f''(''b''),
: f(1) = 1.

It then follows that ''f''(¬''a'') = ¬''f''(''a'') for all ''a'' in ''A'' and that ''f''(0) = 0 as well. The [[class (set theory)|class]] of all Boolean algebras, together with this notion of morphism, forms a [[full subcategory]] of the [[category theory|category]] of lattices.

== Boolean rings ==
{{Main|Boolean ring}}
Every Boolean algebra (A, ∧, ∨) gives rise to a [[ring (algebra)|ring]] (''A'', +, ·) by defining ''a'' + ''b'' := (''a'' ∧ ¬''b'') ∨ (''b'' ∧ ¬''a'') = (''a'' ∨ ''b'') ∧ ¬(''a'' ∧ ''b'') (this operation is called [[symmetric difference]] in the case of sets and [[Truth table#Exclusive disjunction|XOR]] in the case of logic) and ''a'' · ''b'' := ''a'' ∧ ''b''. The zero element of this ring coincides with the 0 of the Boolean algebra; the multiplicative identity element of the ring is the 1 of the Boolean algebra. This ring has the property that ''a'' · ''a'' = ''a'' for all ''a'' in ''A''; rings with this property are called [[Boolean ring]]s. 

Conversely, if a Boolean ring ''A'' is given, we can turn it into a Boolean algebra by defining ''x'' ∨ ''y'' := ''x'' + ''y'' + (''x'' · ''y'') and ''x'' ∧ ''y'' := ''x'' · ''y''.
<ref>Stone, 1936</ref><ref>Hsiang, 1985, p.260</ref>
Since these two constructions are inverses of each other, we can say that every Boolean ring arises from a Boolean algebra, and vice versa. Furthermore, a map ''f'' : ''A'' → ''B'' is a homomorphism of Boolean algebras if and only if it is a homomorphism of Boolean rings. The [[category theory|categories]] of Boolean rings and Boolean algebras are equivalent.

Hsiang (1985) gave a [[Abstract rewriting system|rule-based algorithm]] to [[Word problem (mathematics)|check]] whether two arbitrary expressions denote the same value in every Boolean ring.
<!---probably too much details(?):---
Hsiang (1985) gave a [[Confluence (abstract rewriting)|confluent]] and [[Abstract_rewriting_system#Termination_and_convergence|terminating]] [[Abstract rewriting system|rewrite system]] for Boolean rings, thus solving their [[Word problem (mathematics)|word problem]]: to check whether two arbitrary expressions ''s'' and ''t'' denote the same value in every Boolean ring, apply rewrite rules to ''s'' as long as possible, resulting in an expression ''s''<sub>n</sub>, obtain ''t''<sub>n</sub> from ''t'' in a similar way, and check whether ''s''<sub>n</sub> and ''t''<sub>n</sub> are literally identical, except for different parenthezation and order of operands of "+" or "·".
--->
More generally, Boudet, Jouannaud, and Schmidt-Schauß (1989) gave an algorithm to [[Unification_(computer_science)#Particular_background_knowledge_sets_.24_E_.24|solve equations]] between arbitrary Boolean-ring expressions.
Employing the similarity of Boolean rings and Boolean algebras, both algorithms have applications in [[automated theorem proving]].

== Ideals and filters ==
{{Main|Ideal (order theory)}}{{Main|Filter (mathematics)}}
An ''ideal'' of the Boolean algebra ''A'' is a subset ''I'' such that for all ''x'', ''y'' in ''I'' we have x ∨ y in ''I'' and for all ''a'' in ''A'' we have ''a'' ∧ ''x'' in ''I''. This notion of ideal coincides with the notion of [[ring ideal]] in the Boolean ring ''A''. An ideal ''I'' of ''A'' is called ''prime'' if ''I'' ≠ ''A'' and if ''a'' ∧ ''b'' in ''I'' always implies ''a'' in ''I'' or ''b'' in ''I''. Furthermore, for every ''a'' ∈ ''A'' we have that ''a'' ∧ ''-a'' = 0 ∈ ''I'' and then ''a'' ∈ ''I'' or ''-a'' ∈ ''I'' for every ''a'' ∈ ''A'', if ''I'' is prime. An ideal ''I'' of ''A'' is called ''maximal'' if ''I'' ≠ ''A'' and if the only ideal properly containing ''I'' is ''A'' itself. For an ideal ''I'', if ''a'' ∉ ''I'' and ''-a'' ∉ ''I'', then ''I'' ∪ {''a''} or ''I'' ∪ {''-a''} is properly contained in another ideal ''J''. Hence, that an ''I'' is not maximal and therefore the notions of prime ideal and maximal ideal are equivalent in Boolean algebras. Moreover, these notions coincide with ring theoretic ones of [[prime ideal]] and [[maximal ideal]] in the Boolean ring ''A''. 

The dual of an ''ideal'' is a ''filter''. A ''filter'' of the Boolean algebra ''A'' is a subset ''p'' such that for all ''x'', ''y'' in ''p'' we have ''x'' ∧ ''y'' in ''p'' and for all ''a'' in ''A'' we have ''a'' ∨ ''x'' in ''p''. The dual of a ''maximal'' (or ''prime'') ''ideal'' in a Boolean algebra is ''[[ultrafilter]]''. The statement ''every filter in a Boolean algebra can be extended to an ultrafilter'' is called the ''[[Boolean prime ideal theorem#The ultrafilter lemma|Ultrafilter Theorem]]'' and can not be proved in [[Zermelo–Fraenkel set theory|ZF]], if [[Zermelo–Fraenkel set theory|ZF]] is [[consistent]]. Within ZF, it is strictly weaker than the [[axiom of choice]].
The Ultrafilter Theorem has many equivalent formulations: ''every Boolean algebra has an ultrafilter'', ''every ideal in a Boolean algebra can be extended to a prime ideal'', etc.

== Representations ==

It can be shown that every ''finite'' Boolean algebra is isomorphic to the Boolean algebra of all subsets of a finite set.  Therefore, the number of elements of every finite Boolean algebra is a [[power of two]]. 

[[Marshall H. Stone|Stone's]] celebrated ''[[Stone's representation theorem for Boolean algebras|representation theorem for Boolean algebras]]'' states that ''every'' Boolean algebra ''A'' is isomorphic to the Boolean algebra of all [[clopen set|clopen]] sets in some ([[compact space|compact]] [[totally disconnected]] [[Hausdorff space|Hausdorff]]) topological space.

== Axiomatics ==

{| align="right" class="wikitable collapsible collapsed" style="text-align:left"
! colspan="2" | '''Proven properties'''
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''UId<sub>1</sub>''' !!   !! colspan="2" | If ''x'' ∨ ''o'' = ''x'' for all ''x'', then ''o'' = 0
|-
| Proof:      ||    || colspan="2" | If ''x'' ∨ ''o'' = ''x'', then
|-
|             ||  || 0
|-
|             || = || 0 ∨ ''o'' || by assumption
|-
|             || = || ''o'' ∨ 0 || by '''Cmm<sub>1</sub>'''
|-
|             || = || ''o'' || by '''Idn<sub>1</sub>'''
|}
| '''UId<sub>2</sub>''' &nbsp; [dual] &nbsp; If ''x'' ∧ ''i'' = ''x'' for all ''x'', then ''i'' = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''Idm<sub>1</sub>''' !!   !! ''x'' ∨ ''x'' = ''x''
|-
| Proof:      ||   || ''x'' ∨ ''x''
|-
|             || = || (''x'' ∨ ''x'') ∧ 1 || by '''Idn<sub>2</sub>'''
|-
|             || = || (''x'' ∨ ''x'') ∧ (''x'' ∨ ¬''x'') || by '''Cpl<sub>1</sub>'''
|-
|             || = || ''x'' ∨ (''x'' ∧ ¬''x'') || by '''Dst<sub>1</sub>'''
|-
|             || = || ''x'' ∨ 0 || by '''Cpl<sub>2</sub>'''
|-
|             || = || ''x'' || by '''Idn<sub>1</sub>'''
|}
| '''Idm<sub>2</sub>''' &nbsp; [dual] &nbsp; ''x'' ∧ ''x'' = ''x''
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''Bnd<sub>1</sub>''' !!   !! ''x'' ∨ 1 = 1
|-
| Proof:      ||   || ''x'' ∨ 1
|-
|             || = || (''x'' ∨ 1) ∧ 1 || by '''Idn<sub>2</sub>'''
|-
|             || = || 1 ∧ (''x'' ∨ 1) || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''x'' ∨ ¬''x'') ∧ (''x'' ∨ 1) || by '''Cpl<sub>1</sub>'''
|-
|             || = || ''x'' ∨ (¬''x'' ∧ 1) || by '''Dst<sub>1</sub>'''
|-
|             || = || ''x'' ∨ ¬''x'' || by '''Idn<sub>2</sub>'''
|-
|             || = || 1 || by '''Cpl<sub>1</sub>'''
|}
| '''Bnd<sub>2</sub>''' &nbsp; [dual] &nbsp; ''x'' ∧ 0 = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''Abs<sub>1</sub>'''  !!   !! ''x'' ∨ (''x'' ∧ ''y'')  = ''x''
|-
| Proof:      ||   || ''x'' ∨ (''x'' ∧ ''y'') 
|-
|             || = || (''x'' ∧ 1) ∨ (''x'' ∧ ''y'') || by '''Idn<sub>2</sub>'''
|-
|             || = || ''x'' ∧ (1 ∨ ''y'') || by '''Dst<sub>2</sub>'''
|-
|             || = || ''x'' ∧ (''y'' ∨ 1) || by '''Cmm<sub>1</sub>'''
|-
|             || = || ''x'' ∧ 1 || by '''Bnd<sub>1</sub>'''
|-
|             || = || ''x'' || by '''Idn<sub>2</sub>'''
|}
| '''Abs<sub>2</sub>''' &nbsp; [dual] &nbsp; ''x'' ∧ (''x'' ∨ ''y'') = ''x''
|- valign="top"
| colspan="2" |
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''UNg'''  !!   !! colspan="2" | If ''x'' ∨ ''x''<sub>n</sub> = 1 and ''x'' ∧ ''x''<sub>n</sub> = 0, then ''x''<sub>n</sub> = ¬''x''
|-
| Proof:      ||   || colspan="2" | If ''x'' ∨ ''x''<sub>n</sub> = 1 and ''x'' ∧ ''x''<sub>n</sub> = 0, then
|-
|             ||   ||''x''<sub>n</sub>
|-
|             || = || ''x''<sub>n</sub> ∧ 1 || by '''Idn<sub>2</sub>'''
|-
|             || = || 1  ∧ ''x''<sub>n</sub> || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''x'' ∨ ¬''x'') ∧ ''x''<sub>n</sub> || by '''Cpl<sub>1</sub>'''
|-
|             || = || ''x''<sub>n</sub> ∧ (''x'' ∨ ¬''x'') || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''x''<sub>n</sub> ∧ ''x'') ∨ (''x''<sub>n</sub> ∧ ¬''x'') || by '''Dst<sub>2</sub>'''
|-
|             || = || (''x'' ∧ ''x''<sub>n</sub>) ∨ (¬''x'' ∧ ''x''<sub>n</sub>) || by '''Cmm<sub>2</sub>'''
|-
|             || = || 0 ∨ (¬''x'' ∧ ''x''<sub>n</sub>) || by assumption
|-
|             || = || (''x'' ∧ ¬''x'')  ∨ (¬''x'' ∧ ''x''<sub>n</sub>) || by '''Cpl<sub>2</sub>'''
|-
|             || = || (¬''x'' ∧ ''x'')  ∨ (¬''x'' ∧ ''x''<sub>n</sub>) || by '''Cmm<sub>2</sub>'''
|-
|             || = || ¬''x'' ∧ (''x'' ∨ ''x''<sub>n</sub>) || by '''Dst<sub>2</sub>'''
|-
|             || = || ¬''x'' ∧ 1 || by assumption
|-
|             || = || ¬''x'' || by '''Idn<sub>2</sub>'''
|}
|- valign="top"
| colspan="2" |
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''DNg'''  !!   !! ¬¬''x'' = ''x''
|-
| Proof:      ||     || ¬''x'' ∨ ''x'' = ''x'' ∨ ¬''x'' = 1 || by '''Cmm<sub>1</sub>''', '''Cpl<sub>1</sub>'''
|-
|             || and || ¬''x'' ∧ ''x'' = ''x'' ∧ ¬''x'' = 0 || by '''Cmm<sub>2</sub>''', '''Cpl<sub>2</sub>'''
|-
|             || hence || ''x'' = ¬¬''x'' || by '''UNg'''
|}
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''A<sub>1</sub>'''  !!   !! ''x'' ∨ (¬''x'' ∨ ''y'') = 1
|-
| Proof:      ||   || ''x'' ∨ (¬''x'' ∨ ''y'')
|-
|             || = || (''x'' ∨ (¬''x'' ∨ ''y'')) ∧ 1 || by '''Idn<sub>2</sub>'''
|-
|             || = || 1 ∧ (''x'' ∨ (¬''x'' ∨ ''y'')) || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''x'' ∨ ¬''x'') ∧ (''x'' ∨ (¬''x'' ∨ ''y'')) || by '''Cpl<sub>1</sub>'''
|-
|             || = || ''x'' ∨ (¬''x'' ∧ (¬''x'' ∨ ''y'')) || by '''Dst<sub>1</sub>'''
|-
|             || = || ''x'' ∨ ¬''x'' || by '''XIb'''
|-
|             || = || 1 || by '''Cpl<sub>1</sub>'''
|}
| '''A<sub>2</sub>''' &nbsp; [dual] &nbsp; ''x'' ∧ (¬''x'' ∧ ''y'') = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''B<sub>1</sub>'''  !!   !! (''x'' ∨ ''y'') ∨ (¬''x'' ∧ ¬''y'') = 1
|-
| Proof:      ||   || (''x'' ∨ ''y'') ∨ (¬''x'' ∧ ¬''y'')
|-
|             || = || ((''x'' ∨ ''y'') ∨ ¬''x'') ∧ ((''x'' ∨ ''y'') ∨  ¬''y'') || by '''Dst<sub>1</sub>'''
|-
|             || = || (¬''x'' ∨ (''x'' ∨ ''y'')) ∧ (¬''y'' ∨ (''y'' ∨ ''x'')) || by '''Cmm<sub>1</sub>'''
|-
|             || = || (¬''x'' ∨ (¬¬''x'' ∨ ''y'')) ∧ (¬''y'' ∨ (¬¬''y'' ∨ ''x'')) || by '''DNg'''
|-
|             || = || 1 ∧ 1 || by '''A<sub>1</sub>'''
|-
|             || = || 1 || by '''Idn<sub>2</sub>'''
|}
| '''B<sub>1</sub>''' &nbsp; [dual] &nbsp; (''x'' ∧ ''y'') ∧ (¬''x'' ∨ ¬''y'') = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''C<sub>1</sub>'''  !!   !! (''x'' ∨ ''y'') ∧ (¬''x'' ∧ ¬''y'') = 0
|-
| Proof:      ||   || (''x'' ∨ ''y'') ∧ (¬''x'' ∧ ¬''y'')
|-
|             || = || (¬''x'' ∧ ¬''y'') ∧ (''x'' ∨ ''y'') || by '''Cmm<sub>2</sub>''' 
|-
|             || = || ((¬''x'' ∧ ¬''y'') ∧ ''x'') ∨ ((¬''x'' ∧ ¬''y'') ∧ ''y'') || by '''Dst<sub>2</sub>'''
|-
|             || = || (''x'' ∧ (¬''x'' ∧ ¬''y'')) ∨ (''y'' ∧ (¬''y'' ∧ ¬''x'')) || by '''Cmm<sub>2</sub>'''
|-
|             || = || 0 ∨ 0 || by '''A<sub>2</sub>'''
|-
|             || = || 0 || by '''Idn<sub>1</sub>'''
|}
| '''C<sub>2</sub>''' &nbsp; [dual] &nbsp; (''x'' ∧ ''y'') ∨ (¬''x'' ∨ ¬''y'') = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''DMg<sub>1</sub>'''  !!   !! ¬(''x'' ∨ ''y'') = ¬''x'' ∧ ¬''y''
|-
| Proof:      ||   || by '''B<sub>1</sub>''', '''C<sub>1</sub>''', and '''UNg'''
|}
| '''DMg<sub>2</sub>''' &nbsp; [dual] &nbsp; ¬(''x'' ∧ ''y'') = ¬''x'' ∨ ¬''y''
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''D<sub>1</sub>'''  !!   !! (''x''∨(''y''∨''z'')) ∨ ¬''x'' = 1
|-
| Proof:      ||   || (''x'' ∨ (''y'' ∨ ''z'')) ∨ ¬''x''
|-
|             || = || ¬''x'' ∨ (''x'' ∨ (''y'' ∨ ''z'')) || by '''Cmm<sub>1</sub>'''
|-
|             || = || ¬''x'' ∨ (¬¬''x'' ∨ (''y'' ∨ ''z'')) || by '''DNg'''
|-
|             || = || 1 || by '''A<sub>1</sub>'''
|}
| '''D<sub>2</sub>''' &nbsp; [dual] &nbsp; (''x''∧(''y''∧''z'')) ∧ ¬''x'' = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''E<sub>1</sub>'''  !!   !! ''y'' ∧ (''x''∨(''y''∨''z'')) = ''y''
|-
| Proof:      ||   || ''y'' ∧ (''x'' ∨ (''y'' ∨ ''z''))
|-
|             || = || (''y'' ∧ ''x'') ∨ (''y'' ∧ (''y'' ∨ ''z'')) || by '''Dst<sub>2</sub>'''
|-
|             || = || (''y'' ∧ ''x'') ∨ ''y'' || by '''Abs<sub>2</sub>'''
|-
|             || = || ''y'' ∨ (''y'' ∧ ''x'') || by '''Cmm<sub>1</sub>'''
|-
|             || = || ''y'' || by '''Abs<sub>1</sub>'''
|}
| '''E<sub>2</sub>''' &nbsp; [dual] &nbsp; ''y'' ∨ (''x''∧(''y''∧''z'')) = ''y''
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''F<sub>1</sub>'''  !!   !! (''x''∨(''y''∨''z'')) ∨ ¬''y'' = 1
|-
| Proof:      ||   || (''x'' ∨ (''y'' ∨ ''z'')) ∨ ¬''y''
|-
|             || = || ¬''y'' ∨ (''x'' ∨ (''y'' ∨ ''z'')) || by '''Cmm<sub>1</sub>'''
|-
|             || = || (¬''y'' ∨ (''x'' ∨ (''y'' ∨ ''z''))) ∧ 1 || by '''Idn<sub>2</sub>'''
|-
|             || = || 1 ∧ (¬''y'' ∨ (''x'' ∨ (''y'' ∨ ''z''))) || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''y'' ∨ ¬''y'') ∧ (¬''y'' ∨ (''x'' ∨ (''y'' ∨ ''z''))) || by '''Cpl<sub>1</sub>'''
|-
|             || = || (¬''y'' ∨ ''y'') ∧ (¬''y'' ∨ (''x'' ∨ (''y'' ∨ ''z''))) || by '''Cmm<sub>1</sub>'''
|-
|             || = || ¬''y'' ∨ (''y'' ∧ (''x'' ∨ (''y'' ∨ ''z''))) || by '''Dst<sub>1</sub>'''
|-
|             || = || ¬''y'' ∨ ''y'' || by '''E<sub>1</sub>'''
|-
|             || = || ''y'' ∨ ¬''y'' || by '''Cmm<sub>1</sub>'''
|-
|             || = || 1 || by '''Cpl<sub>1</sub>'''
|}
| '''F<sub>2</sub>''' &nbsp; [dual] &nbsp; (''x''∧(''y''∧''z'')) ∧ ¬''y'' = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''G<sub>1</sub>'''  !!   !! (''x''∨(''y''∨''z'')) ∨ ¬''z'' = 1
|-
| Proof:      ||   || (''x'' ∨ (''y'' ∨ ''z'')) ∨ ¬''z''
|-
|             || = || (''x'' ∨ (''z'' ∨ ''y'')) ∨ ¬''z'' || by '''Cmm<sub>1</sub>'''
|-
|             || = || 1 || by '''F<sub>1</sub>'''
|}
| '''G<sub>2</sub>''' &nbsp; [dual]  &nbsp;  (''x''∧(''y''∧''z'')) ∧ ¬''z'' = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''H<sub>1</sub>'''  !!   !! ¬((''x''∨''y'')∨''z'') ∧ ''x'' = 0
|-
| Proof:      ||   || ¬((''x'' ∨ ''y'') ∨ ''z'') ∧ ''x''
|-
|             || = || (¬(''x'' ∨ ''y'') ∧ ¬''z'') ∧ ''x'' || by '''DMg<sub>1</sub>'''
|-
|             || = || ((¬''x'' ∧ ¬''y'') ∧ ¬''z'') ∧ ''x'' || by '''DMg<sub>1</sub>'''
|-
|             || = || ''x'' ∧ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'') || by '''Cmm<sub>2</sub>'''
|-
|             || = || (''x'' ∧ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'')) ∨ 0 || by '''Idn<sub>1</sub>'''
|-
|             || = || 0 ∨ (''x'' ∧ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'')) || by '''Cmm<sub>1</sub>'''
|-
|             || = || (''x'' ∧ ¬''x'') ∨ (''x'' ∧ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'')) || by '''Cpl<sub>1</sub>'''
|-
|             || = || ''x'' ∧ (¬''x'' ∨ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'')) || by '''Dst<sub>2</sub>'''
|-
|             || = || ''x'' ∧ (¬''x'' ∨ (¬''z'' ∧ (¬''x'' ∧ ¬''y''))) || by '''Cmm<sub>2</sub>'''
|-
|             || = || ''x'' ∧ ¬''x'' || by '''E<sub>2</sub>'''
|-
|             || = || 0 || by '''Cpl<sub>2</sub>'''
|}
| '''H<sub>2</sub>''' &nbsp; [dual]  &nbsp;  ¬((''x''∧''y'')∧''z'') ∨ ''x'' = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''I<sub>1</sub>'''  !!   !! ¬((''x''∨''y'')∨''z'') ∧ ''y'' = 0
|-
| Proof:      ||   || ¬((''x'' ∨ ''y'') ∨ ''z'') ∧ ''y''
|-
|             || = || ¬((''y'' ∨ ''x'') ∨ ''z'') ∧ ''y'' || by '''Cmm<sub>1</sub>'''
|-
|             || = || 0 || by '''H<sub>1</sub>'''
|}
| '''I<sub>2</sub>''' &nbsp; [dual]  &nbsp;  ¬((''x''∧''y'')∧''z'') ∨ ''y'' = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''J<sub>1</sub>'''  !!   !! ¬((''x''∨''y'')∨''z'') ∧ ''z'' = 0
|-
| Proof:      ||   || ¬((''x'' ∨ ''y'') ∨ ''z'') ∧ ''z''
|-
|             || = || (¬(''x'' ∨ ''y'') ∧ ¬''z'') ∧ ''z'' || by '''DMg<sub>1</sub>'''
|-
|             || = || ''z'' ∧ (¬(''x'' ∨ ''y'') ∧ ¬''z'') || by '''Cmm<sub>2</sub>'''
|-
|             || = || ''z'' ∧ ( ¬''z'' ∧ ¬(''x'' ∨ ''y'')) || by '''Cmm<sub>2</sub>'''
|-
|             || = || 0 || by '''A<sub>2</sub>'''
|}
| '''J<sub>2</sub>''' &nbsp; [dual]  &nbsp;  ¬((''x''∧''y'')∧''z'') ∨ ''z'' = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''K<sub>1</sub>'''  !!   !! (''x'' ∨ (''y'' ∨ ''z'')) ∨ ¬((''x'' ∨ ''y'') ∨ ''z'') = 1
|-
| Proof:      ||   || (''x''∨(''y''∨''z'')) ∨ ¬((''x'' ∨ ''y'') ∨ ''z'')
|-
|             || = || (''x''∨(''y''∨''z'')) ∨ (¬(''x'' ∨ ''y'') ∧ ¬''z'') || by '''DMg<sub>1</sub>'''
|-
|             || = || (''x''∨(''y''∨''z'')) ∨ ((¬''x'' ∧ ¬''y'') ∧ ¬''z'') || by '''DMg<sub>1</sub>'''
|-
|             || = || ((''x''∨(''y''∨''z'')) ∨ (¬''x'' ∧ ¬''y'')) ∧  ((''x''∨(''y''∨''z'')) ∨ ¬''z'')|| by '''Dst<sub>1</sub>'''
|-
|             || = || (((''x''∨(''y''∨''z'')) ∨ ¬''x'') ∧ ((''x''∨(''y''∨''z'')) ∨ ¬''y'')) ∧  ((''x''∨(''y''∨''z'')) ∨ ¬''z'')|| by '''Dst<sub>1</sub>'''
|-
|             || = || (1 ∧ 1) ∧ 1 || by '''D<sub>1</sub>''','''F<sub>1</sub>''','''G<sub>1</sub>'''
|-
|             || = || 1 || by '''Idn<sub>2</sub>'''
|}
| '''K<sub>2</sub>''' &nbsp; [dual]  &nbsp;  (''x'' ∧ (''y'' ∧ ''z'')) ∧ ¬((''x'' ∧ ''y'') ∧ ''z'') = 0
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''L<sub>1</sub>'''  !!   !! (''x'' ∨ (''y'' ∨ ''z'')) ∧ ¬((''x'' ∨ ''y'') ∨ ''z'') = 0
|-
| Proof:      ||   || (''x'' ∨ (''y'' ∨ ''z'')) ∧ ¬((''x'' ∨ ''y'') ∨ ''z'')
|-
|             || = || ¬((''x''∨''y'')∨''z'') ∧ (''x'' ∨ (''y'' ∨ ''z'')) || by '''Cmm<sub>2</sub>'''
|-
|             || = || (¬((''x''∨''y'')∨''z'') ∧ ''x'') ∨ (¬((''x''∨''y'')∨''z'') ∧ (''y'' ∨ ''z'')) || by '''Dst<sub>2</sub>'''
|-
|             || = || (¬((''x''∨''y'')∨''z'') ∧ ''x'') ∨ ((¬((''x''∨''y'')∨''z'') ∧ ''y'') ∨ (¬((''x''∨''y'')∨''z'') ∧ ''z'')) || by '''Dst<sub>2</sub>'''
|-
|             || = || (0 ∨ 0) ∨ 0 || by '''H<sub>1</sub>''','''I<sub>1</sub>''','''J<sub>1</sub>'''
|-
|             || = || 0 || by '''Idn<sub>1</sub>'''
|}
| '''L<sub>2</sub>''' &nbsp; [dual]  &nbsp; (''x'' ∧ (''y'' ∧ ''z'')) ∨ ¬((''x'' ∧ ''y'') ∧ ''z'') = 1
|- valign="top"
|
{| align="left" class="collapsible collapsed" style="text-align:left"
! '''Ass<sub>1</sub>'''  !!   !! ''x'' ∨ (''y'' ∨ ''z'') = (''x'' ∨ ''y'') ∨ ''z''
|-
| Proof:      ||   || by '''K<sub>1</sub>''', '''L<sub>1</sub>''', '''UNg''', '''DNg'''
|}
| '''Ass<sub>2</sub>''' &nbsp; [dual]  &nbsp;  ''x'' ∧ (''y'' ∧ ''z'') = (''x'' ∧ ''y'') ∧ ''z''
|- 
| colspan="2" |
{| align="left" class="collapsible" style="text-align:left"
|-
! colspan="2" | Abbreviations
|-
| '''UId''' ||  Unique Identity
|-
| '''Idm''' ||  [[Idempotence]]
|-
| '''Bnd''' ||  [[Bounded lattice|Boundaries]]
|-
| '''Abs''' ||  [[Absorption law]]
|-
| '''UNg''' ||  Unique Negation
|-
| '''DNg''' ||  [[Double negation]]
|-
| '''DMg''' ||  [[De Morgan's Law]]
|-
| '''Ass''' ||  [[Associativity]]
|}
|}
{| align="right" class="wikitable collapsible collapsed" style="text-align:left"
! colspan="4"| '''Huntington 1904 Boolean algebra axioms'''
|- valign="top"
| '''Idn<sub>1</sub>'''  || ''x'' ∨ 0 = ''x''
| '''Idn<sub>2</sub>'''  || ''x'' ∧ 1 = ''x''
|- valign="top"
| '''Cmm<sub>1</sub>''' || ''x'' ∨ ''y'' = ''y'' ∨ ''x''
| '''Cmm<sub>2</sub>''' || ''x'' ∧ ''y'' = ''y'' ∧ ''x''
|- valign="top"
| '''Dst<sub>1</sub>'''  || ''x'' ∨ (''y''∧''z'') = (''x''∨''y'') ∧ (''x''∨''z'')
| '''Dst<sub>2</sub>'''  || ''x'' ∧ (''y''∨''z'') = (''x''∧''y'') ∨ (''x''∧''z'')
|- valign="top"
| '''Cpl<sub>1</sub>'''   || ''x'' ∨ ¬''x'' = 1
| '''Cpl<sub>2</sub>'''   || ''x'' ∧ ¬''x'' = 0
|- 
| colspan="4" |
{| align="left" class="collapsible" style="text-align:left"
|-
! colspan="2" | Abbreviations
|-
| '''Idn''' ||  [[Identity element|Identity]]
|-
| '''Cmm''' ||  [[Commutativity]]
|-
| '''Dst''' ||  [[Distributivity]]
|-
| '''Cpl''' ||  [[Complemented lattice|Complements]]
|}
|}

The first axiomatization of Boolean lattices/algebras in general was given by [[Alfred North Whitehead]] in 1898.<ref name="PadmanabhanRudeanu2008">Padmanabhan, [http://books.google.com/books?id=JlXSlpmlSv4C&pg=PA73#v=onepage&q&f=false p. 73]</ref><ref>Whitehead, 1898, p.37</ref>
It included the [[#Definition|above axioms]] and additionally ''x''∨1=1 and ''x''∧0=0.
In 1904, the American mathematician [[Edward V. Huntington]] (1874–1952) gave probably the most parsimonious axiomatization based on ∧, ∨, ¬, even proving the associativity laws (see box).<ref>Huntington, 1904, p.292-293, (first of several axiomatizations by Huntington)</ref>
He also proved that these axioms are [[Independence (mathematical logic)|independent]] of each other.<ref>Huntington, 1904, p.296</ref>
In 1933, Huntington set out the following elegant axiomatization for Boolean algebra.  It requires just one binary operation + and a [[unary functional symbol]] ''n'', to be read as 'complement', which satisfy the following laws:

# ''Commutativity'': ''x'' + ''y'' = ''y'' + ''x''.
# ''Associativity'': (''x'' + ''y'') + ''z'' = ''x'' + (''y'' + ''z'').
# ''Huntington equation'': ''n''(''n''(''x'') + ''y'') + ''n''(''n''(''x'') + ''n''(''y'')) = ''x''.

[[Herbert Robbins]] immediately asked: If the Huntington equation is replaced with its dual, to wit:

:4. ''Robbins Equation'': ''n''(''n''(''x'' + ''y'') + ''n''(''x'' + ''n''(''y''))) = ''x'',

do (1), (2), and (4) form a basis for Boolean algebra? Calling (1), (2), and (4) a ''Robbins algebra'', the question then becomes: Is every Robbins algebra a Boolean algebra? This question (which came to be known as the [[Robbins conjecture]]) remained open for decades, and became a favorite question of [[Alfred Tarski]] and his students. In 1996, [[William McCune]] at [[Argonne National Laboratory]], building on earlier work by Larry Wos, Steve Winker, and Bob Veroff, answered Robbins's question in the affirmative: Every Robbins algebra is a Boolean algebra. Crucial to McCune's proof was the [[automated reasoning program]] [[EQP]] he designed. For a simplification of McCune's proof, see Dahn (1998).

{{clear}}

== Generalizations ==

{| style="float:right"
| {{Algebraic structures|Lattice}}
|}
Removing the requirement of existence of a unit from the axioms of Boolean algebra yields "generalized Boolean algebras". Formally, a [[distributive lattice]] ''B'' is a generalized Boolean lattice, if it has a smallest element 0 and for any elements ''a'' and ''b'' in ''B'' such that ''a'' ≤ ''b'', there exists an element ''x'' such that a ∧ x = 0 and a ∨ x = b. Defining a ∖ b as the unique ''x'' such that (a ∧ b) ∨ x = a and (a ∧ b) ∧ x = 0, we say that the structure (B,∧,∨,∖,0) is a ''generalized Boolean algebra'', while (B,∨,0) is a ''generalized Boolean semilattice''. Generalized Boolean lattices are exactly the [[Ideal (order theory)|ideals]] of Boolean lattices.

A structure that satisfies all axioms for Boolean algebras except the two distributivity axioms is called an [[orthocomplemented lattice]]. Orthocomplemented lattices arise naturally in [[quantum logic]] as lattices of closed subspaces for separable [[Hilbert space]]s.

==Notes==

{{reflist}}

==References==

*{{citation
 | last1 = Brown
 | first1 = Stephen
 | last2 = Vranesic
 | first2 = Zvonko
 | year = 2002
 | title = Fundamentals of Digital Logic with VHDL Design
 | edition = 2nd
 | publisher = [[McGraw-Hill|McGraw–Hill]]
 | isbn = 978-0-07-249938-4}}. See Section 2.5.
*{{cite journal
 | author=A. Boudet, J.P. Jouannaud, M. Schmidt-Schauß
 | title=Unification of Boolean Rings and Abelian Groups
 | journal=Journal of Symbolic Computation
 | year=1989
 | volume=8
 | pages=449-477
 | url=http://www.sciencedirect.com/science/article/pii/S0747717189800549/pdf?md5=713ed362e4b6f2db53923cc5ed47c818&pid=1-s2.0-S0747717189800549-main.pdf}}
*{{citation
 | last1 = Cori
 | first1 = Rene
 | last2 = Lascar
 | first2 = Daniel
 | year = 2000
 | title = Mathematical Logic:  A Course with Exercises
 | publisher = [[Oxford University Press]]
 | isbn = 978-0-19-850048-3}}. See Chapter 2.
*{{citation
 | last = Dahn
 | first = B. I.
 | year = 1998
 | title = Robbins Algebras are Boolean:  A Revision of McCune's Computer-Generated Solution of the Robbins Problem
 | journal = Journal of Algebra
 | volume = 208
 | pages = 526–532
 | doi = 10.1006/jabr.1998.7467
 | issue = 2}}.
*{{cite book
 | author=B.A. Davey, H.A. Priestley
 | title=Introduction to Lattices and Order
 | year=1990
 | publisher=Cambridge University Press
 | series=Cambridge Mathematical Textbooks}}
*{{citation
 | last1 = Givant
 | first1 = Steven
 | first2 = Paul
 | last2 = Halmos
 | year = 2009
 | title = Introduction to Boolean Algebras
 | series = Undergraduate Texts in Mathematics | publisher = [[Springer Science+Business Media|Springer]]
 | isbn = 978-0-387-40293-2}}.
*{{citation
 | authorlink = Paul Halmos
 | last = Halmos
 | first = Paul
 | year = 1963
 | title = Lectures on Boolean Algebras
 | publisher = Van Nostrand
 | isbn = 978-0-387-90094-0}}.
*{{citation
 | authorlink1 = Paul Halmos
 | last1 = Halmos
 | first1 = Paul
 | first2 = Steven
 | last2 = Givant
 | year = 1998
 | title = Logic as Algebra
 | series = Dolciani Mathematical Expositions | volume = 21 | publisher = [[Mathematical Association of America]]
 | isbn = 978-0-88385-327-6}}.
*{{cite journal
 | author=Hsiang, Jieh
 | title=Refutational Theorem Proving Using Term Rewriting Systems
 | journal=AI
 | year=1985
 | volume=25
 | pages=255-300
 | url=http://www.researchgate.net/publication/223327412_Refutational_theorem_proving_using_term-rewriting_systems/file/60b7d5193580e500f1.pdf}}
*{{cite journal
 | authorlink=Edward V. Huntington
 | author=Edward V. Huntington
 | title=Sets of Independent Postulates for the Algebra of Logic
 | journal=These Transactions
 | year=1904
 | volume=5
 | pages=288-309
 | url=http://www.jstor.org/stable/pdfplus/1986459.pdf}}
*{{citation
 | authorlink = Edward Vermilye Huntington
 | last = Huntington
 | first = E. V.
 | year = 1933
 | title = New sets of independent postulates for the algebra of logic
 | journal = [[Transactions of the American Mathematical Society]]
 | volume = 35
 | pages = 274–304
 | doi = 10.2307/1989325
 | issue = 1
 | publisher = American Mathematical Society
 | url = http://www.ams.org/journals/tran/1933-035-01/S0002-9947-1933-1501684-X/S0002-9947-1933-1501684-X.pdf
 | jstor = 1989325}}.
*{{citation
 | authorlink = Edward Vermilye Huntington
 | last = Huntington
 | first = E. V.
 | year = 1933
 | title = Boolean algebra: A correction
 | journal = [[Transactions of the American Mathematical Society]]
 | volume = 35
 | pages = 557–558
 | doi = 10.2307/1989783
 | issue = 2
 | publisher = American Mathematical Society
 | jstor = 1989783}}.
*{{citation
 | last = Mendelson
 | first = Elliott
 | year = 1970
 | title = Boolean Algebra and Switching Circuits
 | series = Schaum's Outline Series in Mathematics | publisher = [[McGraw-Hill|McGraw–Hill]]
 | isbn = 978-0-07-041460-0}}.
*{{citation
 | editor1-last = Monk
 | editor1-first = J. Donald
 | editor2-first = R.
 | editor2-last = Bonnet
 | year = 1989
 | title = Handbook of Boolean Algebras
 | publisher = [[Elsevier|North-Holland]]
 | isbn = 978-0-444-87291-3}}. In 3 volumes. (Vol.1:ISBN 978-0-444-70261-6, Vol.2:ISBN 978-0-444-87152-7, Vol.3:ISBN 978-0-444-87153-4)
*{{citation
 | last1 = Padmanabhan
 | first1 = Ranganathan
 | last2 = Rudeanu
 | first2 = Sergiu
 | year = 2008
 | title = Axioms for lattices and boolean algebras
 | publisher = World Scientific
 | isbn = 978-981-283-454-6}}.
*{{citation
 | authorlink = Roman Sikorski
 | last = Sikorski
 | first = Roman
 | year = 1966
 | title = Boolean Algebras
 | series = Ergebnisse der Mathematik und ihrer Grenzgebiete
 | publisher = [[Springer Verlag]]
 | ref = Sikorski1966BooleanAlgebras
 }}.
*{{citation
 | last = Stoll
 | first = R. R.
 | year = 1963
 | title = Set Theory and Logic
 | publisher = W. H. Freeman
 | isbn = 978-0-486-63829-4}}. Reprinted by [[Dover Publications]], 1979.
*{{cite journal
 | authorlink=Marshall H. Stone 
 | author=Marshall H. Stone 
 | title=The Theory of Representations for Boolean Algebra
 | journal=Trans. AMS
 | year=1936
 | volume=40
 | pages=37-111}}
*{{cite book
 | authorlink=A.N. Whitehead
 | author=A.N. Whitehead
 | title=A Treatise on Universal Algebra
 | year=1898
 | publisher=Cambridge University Press
 | isbn=1-4297-0032-7
 | url=http://projecteuclid.org/euclid.chmm/1263316509}}

==See also==
{{col-begin}}
{{col-break}}
* [[List of Boolean algebra topics]]
* [[Boolean domain]]
* [[Boolean function]]
* [[Boolean logic]]
* [[Boolean ring]]
* [[Boolean-valued function]]
* [[Canonical form (Boolean algebra)]]
* [[Complete Boolean algebra]]
{{col-break}}
* [[De Morgan's laws]]
* [[Finitary boolean function]]
* [[Forcing (mathematics)]]
* [[Free Boolean algebra]]
* [[Heyting algebra]]
* [[Hypercube graph]]
* [[Karnaugh map]]
* [[Laws of Form]]
{{col-break}}
* [[Logic gate]]
* [[Logical graph]]
* [[Logical matrix]]
* [[Propositional logic]]
* [[Quine–McCluskey algorithm]]
* [[Two-element Boolean algebra]]
* [[Venn diagram]]
* [[Conditional event algebra]]
{{col-end}}

==External links==
* {{springer|title=Boolean algebra|id=p/b016920}}
* [http://www.allaboutcircuits.com/vol_4/chpt_7/1.html Boolean Algebra] from AllAboutCircuits
* [[Stanford Encyclopedia of Philosophy]]: "[http://plato.stanford.edu/entries/boolalg-math/ The Mathematics of Boolean Algebra,]" by J. Donald Monk.
* McCune W., 1997. ''[http://www.cs.unm.edu/~mccune/papers/robbins/ Robbins Algebras Are Boolean]'' JAR 19(3), 263—276
* [http://demonstrations.wolfram.com/BooleanAlgebra/ "Boolean Algebra"] by [[Eric W. Weisstein]], [[Wolfram Demonstrations Project]], 2007.
A monograph available free online:
* Burris, Stanley N.; Sankappanavar, H. P., 1981. ''[http://www.thoralf.uwaterloo.ca/htdocs/ualg.html A Course in Universal Algebra.]''  Springer-Verlag. ISBN 3-540-90578-2.
* {{MathWorld | urlname=BooleanAlgebra | title=Boolean Algebra}}

{{DEFAULTSORT:Boolean Algebra (Structure)}}
[[Category:Boolean algebra| ]]
[[Category:Algebraic structures]]

{{Link GA|pl}}