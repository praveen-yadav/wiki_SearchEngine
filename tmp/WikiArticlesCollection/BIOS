{{About|the BIOS as found in [[IBM PC compatible]]s|the general concept|Firmware|other uses|Bios (disambiguation){{!}}Bios}}

In [[IBM PC compatible]] computers, the '''Basic Input/Output System''' ('''BIOS'''), also known as '''System BIOS''', '''[[read-only memory|ROM]] BIOS''' or '''PC&nbsp;BIOS''' ({{IPAc-en|ˈ|b|aɪ|.|oʊ|s}}), is a [[de facto standard|''de facto'' standard]] defining a [[firmware]] [[Interface (computing)|interface]].<ref name = "pcguidedefinition">[http://www.pcguide.com/ref/mbsys/bios/index.htm The PC Guide - System BIOS]</ref> The name originated from the Basic Input/Output System used in the [[CP/M]] operating system in 1975.<ref name="Kildall_1975_BDOS"/><ref name="Kildall_1980_CPM"/> The BIOS software is built into the [[Personal computer|PC]], and is the first software run by a PC when powered on.

The fundamental purposes of the BIOS are to initialize and test the system hardware components, and to load a [[bootloader]] or an [[operating system]] from a mass memory device. The BIOS additionally provides abstraction layer for the hardware, i.e. a consistent way for application programs and operating systems to interact with the keyboard, display, and other input/output devices. Variations in the system hardware are hidden by the BIOS from programs that use BIOS services instead of directly accessing the hardware. Modern operating systems ignore the abstraction layer provided by the BIOS and access the hardware components directly.

The BIOS of the original IBM PC/XT had no interactive user interface. Error messages were displayed on the screen, or coded series of sounds were generated to signal errors. Options on the PC and XT were set by switches and jumpers on the main board and on peripheral cards. Modern [[Wintel]]-compatible computers provide a setup routine, accessed at system power-up by a particular key sequence. The user can configure hardware options using the keyboard and video display.

BIOS software is stored on a [[non-volatile]] [[read-only memory|ROM]] chip on the [[motherboard]]. It is specifically designed to work with each particular model of computer, interfacing with various devices that make up the complementary chipset of the system. In modern computer systems, the BIOS contents are stored on a [[Flash memory|flash memory chip]] so that the contents can be rewritten without removing the chip from the motherboard. This allows BIOS software to be easily upgraded to add new features or fix bugs, but can make the computer vulnerable to BIOS [[rootkit]]s.

[[MS-DOS]] ([[PC DOS]]), which was the dominant PC operating system from the early 1980s until the mid 1990s, relied on BIOS services for disk, keyboard, and text display functions.  MS Windows NT, Linux, and other [[protected mode]] operating systems in general do not use it after loading.

BIOS technology is in a transitional process towards [[UEFI]] since 2010<ref>http://www.pcworld.com/article/248426/r_i_p_bios_a_uefi_primer.html</ref>

== Terminology ==
The term BIOS (Basic Input/Output System) was invented by [[Gary Kildall]]<ref name="Swaine_1997_Entrepreneurship"/> and first appeared in the [[CP/M]] operating system in 1975,<ref name="Kildall_1975_BDOS"/><ref name="Kildall_1980_CPM"/><ref name="Fischer_2001_Ewing"/><ref name="Fraley_2007_Killian"/> describing the machine-specific part of CP/M loaded during boot time that interfaces directly with the [[Computer hardware|hardware]].<ref name="Kildall_1980_CPM"/> (A CP/M machine usually has only a simple [[boot loader]] in its [[Read-only memory|ROM]].)

Versions of [[MS-DOS]] or [[PC DOS]] contain a file called variously "[[IO.SYS]]", "[[IBMBIO.COM]]", "IBMBIO.SYS", or "[[DRBIOS.SYS]]"; this file is known as the "[[DOS&nbsp;BIOS]]" (aka "[[DOS I/O System]]") and contains the lower-level hardware-specific part of the operating system. Together with the underlying hardware-specific, but operating system-independent "System BIOS", which resides in ROM, it represents the analogous to the "[[CP/M&nbsp;BIOS]]".

In other types of computers, the terms ''[[boot monitor]]'', ''[[boot loader]]'', and ''[[Booting|boot ROM]]'' are used instead. Some Sun and PowerPC-based computers use [[Open Firmware]] for this purpose.

With the introduction of PS/2 machines, IBM divided the System BIOS into real-mode and protected mode portions. The real-mode portion was meant to provide backward-compatibility with existing operating systems such as DOS, and therefore was named "CBIOS" (for Compatibility BIOS), whereas the "ABIOS" (for Advanced BIOS) provided new interfaces specifically suited for multitasking operating systems such as [[OS/2]].

There are a few alternatives to the functionality of the "Legacy BIOS" in the x86 world: [[Extensible Firmware Interface]], [[Open Firmware]] (used on the [[OLPC XO-1]]), and [[coreboot]].

==The BIOS boot process==
When the [[x86]] [[Microprocessor|processor]] is reset, it loads its [[program counter]] with a fixed address near the top of the 1 megabyte [[Real mode|real-mode]] [[address space]]. The BIOS ROM chips are located in memory so that this starting address is within the BIOS. A jump [[instruction (computer science)|instruction]] then directs the processor to start executing code in the BIOS. If the system has just been powered up ("cold boot"), the full [[power-on self-test]] (POST) is run.  If the reset button was pressed ("warm boot"), a special flag value is detected in [[Nonvolatile BIOS memory|Nonvolatile memory]] (NVRAM) and the BIOS does not run the POST. This saves the time otherwise used to detect and test all memory. The NVRAM is in the [[Real-time clock]] (RTC).

The [[power-on self-test]] tests, identifies, and initializes system devices such as the [[Central processing unit|CPU]], [[Random-access memory|RAM]], [[interrupt controller|interrupt]] and [[DMA controller]]s and other parts of the [[chipset]], [[video display card]], [[Computer keyboard|keyboard]], [[hard disk drive]], [[optical disc drive]] and other basic [[Computer hardware|hardware]]. The BIOS then locates [[boot loader]] software held on a storage device designated as a 'boot device', such as a [[hard disk]], a [[floppy disk]], or a [[CD]]/[[DVD]], and loads and executes that software, giving it control of the PC.<ref>[http://computer.howstuffworks.com/bios1.htm How StuffWorks: What BIOS Does].</ref>  This process is known as ''[[booting]]'', or booting up, which is short for "bootstrapping".

===Boot devices===
The BIOS selects candidate boot devices using information collected by POST and configuration information from [[EEPROM]], [[CMOS]] RAM or, in the earliest PCs, [[DIP switch]]es.  [[Option ROM]]s may also influence or supplant the boot process defined by the motherboard BIOS ROM. The BIOS checks each device in order to see if it is bootable.  For a disk drive or a device that logically emulates a disk drive, such as an [[USB Flash drive]] or perhaps a tape drive, to perform this check the BIOS attempts to load the first sector ([[boot sector]]) from the disk to memory address <code>0x007C00</code>, and checks for the boot sector signature 0x55 0xAA in the last two bytes of the (512 byte long) sector. If the sector cannot be read (due to a missing or blank disk, or due to a hardware failure), or if the sector does not end with the boot signature, the BIOS considers the disk unbootable and proceeds to check the next device.  Another device such as a [[network adapter]] attempts booting by a procedure that is defined by its option ROM (or the equivalent integrated into the motherboard BIOS ROM).  The BIOS proceeds to test each device sequentially until a bootable device is found, at which time the BIOS transfers control to the loaded sector with a jump instruction to its first byte at address <code>0x007C00</code> (1 KiB below the 32 KiB mark).

The behavior if the BIOS doesn't find a bootable device has varied as [[personal computer]]s developed.  The original [[IBM PC]] and XT had [[Microsoft]] [[Cassette BASIC]] in ROM, and if no bootable device was found, [[IBM BASIC|ROM BASIC]] was started. Therefore, barring a hardware failure, an original IBM PC or XT would never fail to boot, either into [[IBM BASIC|BASIC]] or from disk.  One model of PC was available with no disk drive; a [[cassette recorder]] could be attached via the cassette port on the rear, for loading and saving BASIC programs to tape.  Since few programs used BASIC in ROM, clone PC makers left it out; a computer that failed to boot from a disk would display "No ROM BASIC" and halt.  Later computers would display a message like  "No bootable disk found."  Modern BIOSes may display nothing or may automatically enter the BIOS configuration utility when the boot process fails.

Historically, the BIOS would try to boot from a floppy drive first and a hard disk second.  CD or DVD booting is an extension of this. With the [[El Torito (CD-ROM standard)|El Torito optical media boot standard]], the optical drive actually emulates a 3.5" high-density floppy disk to the BIOS for boot purposes.  Optical disks are a special case, because their lowest level of data organization is typically a fairly high-level file system (e.g. [[ISO 9660]] for CD-ROM).  To read the "first sector" of a CD-ROM or DVD-ROM is not a simply defined operation. The complexity of the medium makes it difficult to write a useful boot program in one sector.  Therefore, optical media booting uses the El Torito standard, which specifies a way for an optical disk to contain an image of a high-density ("1.44MB") floppy disk and for the drive to provide access to this disk image in a simple manner that emulates floppy disk drive operations.  Therefore, CD-ROM drives boot as emulated floppy disk drives; the bootable virtual floppy disk can then contain software that provides access to the optical medium in its native format.

A little-known feature of the original IBM BIOS versions is that before beginning the normal boot process they would attempt to load a program through the [[PS/2 connector|keyboard port]].  This was intended for factory test or diagnostic purposes. This was of limited utility outside of factory or repair facilities.<ref>page 5-27 ''IBM Personal Computer Hardware Reference Library Technical Reference'', 1984, publication number 6361459</ref>

===BIOS extensions===
In the IBM PC and AT, peripheral cards such as hard-drive controllers and video display adapters had their own BIOS extension [[option ROM]]s, which provided additional functionality. Code in these extensions runs before the operating system is loaded from [[mass storage]]. These ROMs can test and initialize hardware, add BIOS services, or replace BIOS services with their own versions of those services.  For example, a [[SCSI controller]] usually has a BIOS extension ROM that adds support for hard drives connected through that controller.  Some video cards have extension ROMs that replace the video services of the motherboard BIOS with their own video services.  BIOS extension ROMs gain total control of the machine, so they may never return control to the BIOS that invoked them. An extension ROM could in principle contain an entire operating system or an application program, or it could implement an entirely different boot process such as booting from a network.  Operation of an IBM-compatible computer system can be completely changed by removing or inserting an adapter card (or a ROM chip).

A computer system can contain several BIOS firmware chips. The motherboard BIOS typically contains code to access hardware components necessary for bootstrapping the system, such as the keyboard, display, and storage. In addition, plug-in adapter cards such as [[SCSI]], [[RAID]], [[network interface card]]s, and video boards often include their own BIOS (e.g. [[Video BIOS]]), complementing or replacing the system BIOS code for the given component. Even devices built into the motherboard can behave in this way; their option ROMs can be stored as separate code on the main BIOS [[flash chip]], and upgraded either in tandem with, or separately from, the main BIOS.

An add-in card requires an option ROM if it needs to be used before the operating system can be loaded (usually this means it is required in the bootstrapping process), and is not supported by the main BIOS.

After completing the POST, the motherboard BIOS scans for extension ROMs in an area of the "[[upper memory area]]" space and runs each ROM found, in order. To discover memory-mapped [[Industry Standard Architecture|ISA]] option ROMs during the boot process, BIOS implementations scan real-mode address space from <code>0x0C0000</code> to <code>0x0F0000</code> on 2 [[KiB]] boundaries, looking for a ROM ''signature'': 0x55 followed by 0xAA. In a valid expansion ROM, this signature is followed by a single byte indicating the number of 512-byte blocks it occupies in real memory. The next byte contains an offset describing the option ROM's [[entry point]]. A [[checksum]] of the specified number of 512-byte blocks is calculated, and if the ROM has a valid checksum the BIOS transfers control to the specified entry address. At this point, the expansion ROM code takes over, using BIOS services to register [[interrupt vector]]s for use by post-boot applications, to provide a user configuration interface, or to display diagnostic information.

There are many methods and utilities for examining the contents of various motherboard BIOS and expansion ROMs, such as Microsoft [[DEBUG (DOS Command)|DEBUG]] or the Unix [[dd (Unix)|dd]].

===Boot environment===
The environment for the boot program is very simple: the CPU is in [[real mode]] and the general-purpose and segment registers are undefined.  All BIOS services are available, and the memory below address <code>0x000500</code> contains the [[interrupt vector table]] and the 256-byte BIOS data area, but the boot program must set up its own stack (or at least MS-DOS 6 acts like it must).  All memory at and above address <code>0x000500</code> can be used by the boot program; it may even overwrite itself. The BIOS initializes a reserved block of system RAM with various parameters initialized during the POST. The [[interrupt vector]]s corresponding to the BIOS interrupts have been set to point at the appropriate entry points in the BIOS.

==Operating system services==
The  BIOS ROM is customized to the particular manufacturer's hardware, allowing low-level services (such as reading a keystroke or writing a sector of data to diskette) to be provided in a standardized way to an operating system. For example, an IBM PC might have either a monochrome or a color display adapter (using different display memory addresses and hardware), but a single, standard, BIOS system call may be invoked to display a character at a specified position on the screen in [[text mode]].

The BIOS provides a small [[Library (computing)|library]] of basic input/output functions to operate peripherals (such as the keyboard, rudimentary text and graphics display functions and so forth). When using MS-DOS, BIOS services could be accessed by an application program (or by MS-DOS) by executing an [[INT 13H]] interrupt instruction to access disk sectors, or one of a number of other documented [[BIOS interrupt call]]s to access video display, keyboard, cassette, and other devices.

[[Operating system]]s and executive software, designed to supersede this basic firmware functionality, provide replacement software interfaces to applications.  This began even in the 1980s under MS-DOS, when programmers observed that using the BIOS video services for graphics display was very slow. To increase the speed of screen output, many programs bypassed the BIOS and programmed the video display hardware directly.  Since the AT-compatible BIOS ran in Intel [[real mode]], operating systems on '286 and later processors required hardware device drivers compatible with protected mode operation to replace BIOS services. In modern personal computers the BIOS is used only during booting and initial loading of system software.  Before the operating system's first graphical screen is displayed, input and output are typically handled through BIOS. A boot menu such as the textual menu of Windows that allows one to choose an operating system to boot or to boot into Safe Mode or to use the last known good configuration, is displayed and receives keyboard input through BIOS.

== BIOS components ==

In Intel systems, the BIOS may contain components such as the [[Memory Reference Code]] (MRC), which is responsible for handling memory timings and related hardware settings.<ref name="Life and Times">{{cite web|last=Posted by Alex Watson, possibly repost from original content on custompc.com [unclear]|title=The life and times of the modern motherboard|url=http://www.bit-tech.net/custompc/features/601716/the-life-and-times-of-the-modern-motherboard/page1.html|work=2007-11-27|accessdate=2 February 2013}}</ref>{{rp|8}}<ref>{{cite web|last=David Hilber, Jr.|title=Considerations for  Designing an Embedded Intel  Architecture System with System Memory Down  ®|url=http://download.intel.com/embedded/processor/whitepaper/322506.pdf|publisher=[[Intel]]|accessdate=2 February 2013|date=August 2009}}</ref>

==User interface==
Historically the BIOS in the IBM PC and XT had no built-in user-interface. The BIOS versions in earlier PCs (XT-class) were not software configurable; users set options via [[DIP switch]]es on the motherboard. Later computers, including all IBM-compatibles with 80286 CPUs, had a battery-backed [[Nonvolatile BIOS memory|CMOS RAM]] chip that held BIOS settings.<ref name="CMOS Battery">{{cite web|last=Torres|first=Gabriel|title=Introduction and Lithium Battery|url=http://www.hardwaresecrets.com/article/81|work=Replacing the Motherboard Battery|publisher=hardwaresecrets.com|accessdate=June 20, 2013|date=24 November, 2004}}</ref>  These settings, such as video-adapter type, memory size, and hard-disk parameters, could only be configured by running a configuration program from a disk, not built into the ROM. A special "reference diskette" was inserted in an IBM AT to configure settings such as memory size.  Early BIOS versions did not have passwords or boot-device selection options. The BIOS was hard-coded to boot from the first floppy drive, or, if that failed, the first hard disk. Access control in early AT-class machines was by a physical keylock switch (which was not hard to defeat if the computer case could be opened). Anyone who could switch on the computer could boot it.{{citation needed|date=March 2013}}

[[File:Award BIOS setup utility.png|thumb|Award BIOS setup utility on a standard PC]]

A modern BIOS has a menu-based [[user interface]] (UI) accessed by pressing a certain key on the keyboard when the PC starts. Usually the key is advertised for short time during the early startup, e.g. "Press F1 to enter CMOS setup". The actual key depends on your hardware. In the BIOS UI, a user can:

* configure hardware
* set the [[system clock]]
* enable or disable system components
* select which devices are potential boot devices
* set various password prompts, such as a password for securing access to the BIOS user interface functions itself and preventing malicious users from booting the system from unauthorized peripheral devices

==Chips==
[[Image:Phoenix bios.jpg|thumb|150px|[[Phoenix Technologies|PhoenixBIOS]] D686. This BIOS chip is housed in a [[Plastic leaded chip carrier|PLCC]] package in a socket.]]

The original IBM PC BIOS (and cassette BASIC) was stored on mask-programmed [[Read-only memory]] (ROM) chips in sockets on the motherboard. ROMs could be replaced, but not altered, by users. To allow for updates, many compatible computers used re-programmable memory devices such as [[EEPROM]] and later [[flash memory]] devices. According to Robert Braver, the president of the BIOS manufacturer Micro Firmware, '''Flash BIOS''' chips became common around 1995 because the electrically erasable PROM (EEPROM) chips are cheaper and easier to program than standard [[ultraviolet]] erasable PROM ([[EPROM]]) chips. Flash chips are programmed (and re-programmed) in-circuit, while EPROM chips need to be removed from the motherboard for re-programming.<ref>"[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1997%2Fjun97%2F060997%2F060997.asp Decoding RAM & ROM]." ''[[Smart Computing]]''. June 1997. Volume 8, Issue 6.</ref> BIOS versions are upgraded to take advantage of newer versions of hardware and to correct bugs in previous revisions of BIOSes.<ref>"[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1996%2Fmar96%2F96n0324%2F96n0324.asp Upgrading Your Flash BIOS For Plug And Play]." ''[[Smart Computing]]''. March 1996. Volume 7, Issue 3.</ref>

Beginning with the IBM AT, PCs supported a hardware clock settable through BIOS. It had a century bit which allowed for manually changing the century when the year 2000 happened. Most BIOS revisions created in 1995 and nearly all BIOS revisions in 1997 supported [[Y2K bug|the year 2000]] by setting the century bit automatically when the clock rolled past midnight, December 31, 1999.<ref>"[http://www.smartcomputing.com/editorial/article.asp?article=articles/archive/g0704/41u6/41u6.asp&guid= Time To Check BIOS]." ''[[Smart Computing]]''. April 1999. Volume 7, Issue 4.</ref>

The first flash chips were attached to the [[Industry Standard Architecture|ISA bus]]. Starting in 1997, the BIOS flash moved to the [[Low Pin Count|LPC]] bus, a functional replacement for ISA, following a new standard implementation known as "firmware hub" (FWH). In 2006, the first systems supporting a [[Serial Peripheral Interface]] (SPI) appeared, and the BIOS flash memory moved again.{{citation needed|date=March 2013}}

The size of the BIOS, and the capacities of the ROM, EEPROM and other media it may be stored on, has increased over time as new features have been added to the code; BIOS versions now exist with sizes up to 16 megabytes. Some modern motherboards are including even bigger NAND [[flash memory]] ICs on board which are capable of storing whole compact operating systems, such as some [[Linux distribution]]s. For example, some ASUS motherboards included [[SplashTop]] Linux embedded into their NAND flash memory ICs.<ref>[http://www.geek.com/splashtops-instant-on-linux-desktop/ SplashTop's Instant-On Linux Desktop | Geek.com<!-- Bot generated title -->]</ref>

Another type of firmware chip was found on the IBM PC and early compatibles. In the PC and AT, the [[Keyboard controller (computing)|keyboard interface]] was controlled by a [[microcontroller]] with its own programmable memory. On the IBM AT, this was a 40 pin socketed device. Some manufacturers used an EPROM version of this chip which resembled an EPROM.  In the AT, this controller was also assigned the [[A20 gate]] function to manage memory above the 1 megabyte range; occasionally an upgrade of this "keyboard BIOS" was necessary to take advantage of software that could use upper memory.{{citation needed|date=March 2013}}

== Flashing the BIOS ==
In modern PCs the BIOS is stored in [[EEPROM|rewritable memory]], allowing the contents to be replaced or 'rewritten'. This rewriting of the contents is sometimes termed '''flashing'''. This can be done by a special program, usually provided by the system's manufacturer, or at [[Power-on self-test|POST]], with a BIOS image in a hard drive or [[USB flash drive]]. A file containing such contents is sometimes termed 'a BIOS image'. A BIOS might be reflashed in order to upgrade to a newer version to fix bugs or provide improved performance or to support newer hardware, or a reflashing operation might be needed to fix a damaged BIOS.

== Overclocking ==
Some BIOS chips allow [[overclocking]], an action in which the [[Central processing unit|CPU]] is adjusted to a higher [[clock rate]] than its factory preset. Overclocking may, however, seriously compromise system reliability in insufficiently cooled computers and generally shorten component lifespan. Overclocking, incorrectly performed, may also cause components to overheat so quickly that they destroy themselves.

== BIOS chip vulnerabilities ==
[[File:AMIBIOSIntel CPU uCode Error.jpg|thumb|An [[American Megatrends]] BIOS showing a “[[Intel]] CPU uCode Loading Error” after a failed attempt to upload microcode patches into the CPU.]]<!-- probably just because the CPU revision isn't recognized by this BIOS revision.-->

[[EEPROM]] chips are advantageous because they could be easily updated by the user; hardware manufacturers frequently issue BIOS updates to upgrade their products, improve compatibility and remove [[Software bug|bugs]]. However, this advantage had the risk that an improperly executed or aborted BIOS update could render the computer or device unusable. To avoid these situations, more recent BIOSes use a "boot block"; a portion of the BIOS which runs first and must be updated separately. This code verifies if the rest of the BIOS is intact (using [[Hash function|hash]] [[checksum]]s or other methods) before transferring control to it. If the boot block detects any corruption in the main BIOS, it will typically warn the user that a recovery process must be initiated by booting from [[removable media]] (floppy, CD or USB memory) so the user can try flashing the BIOS again. Some [[motherboard]]s have a ''backup'' BIOS (sometimes referred to as DualBIOS boards) to recover from BIOS corruptions.

=== Virus attacks ===
There are at least four known BIOS attack viruses, two of which were for demonstration purposes. The first one found in the wild was Mebromi, targeting Chinese users.

{{Main|CIH (computer virus)}}

The first BIOS virus was [[CIH (computer virus)|CIH]], whose name matches the initials of its creator, Chen Ing Hau. CIH was also called the "Chernobyl Virus," because its payload date was 1999-04-26, the 13th anniversary of the [[Chernobyl accident]].

CIH appeared in mid-1998 and became active in April 1999. It was able to erase flash ROM BIOS content. Often, infected computers could no longer boot, and people had to remove the flash ROM IC from the motherboard and reprogram it. CIH targeted the then-widespread Intel i430TX motherboard chipset and took advantage of the fact that the [[Windows 9x]] operating systems, also widespread at the time, allowed direct hardware access to all programs.

[[File:Bios chip-2011-04-11.jpg|thumb|Detached BIOS Chip]]
Modern systems are not vulnerable to CIH because of a variety of chipsets being used which are incompatible with the Intel i430TX chipset, and also other flash ROM IC types. There is also extra protection from accidental BIOS rewrites in the form of boot blocks which are protected from accidental overwrite or dual and quad BIOS equipped systems which may, in the event of a crash, use a backup BIOS. Also, all modern operating systems such as [[FreeBSD]], [[Linux]], [[OS X]], [[Windows NT]]-based Windows OS like [[Windows 2000]], [[Windows XP]] and newer, do not allow user-mode programs to have direct hardware access. As a result, as of 2008, CIH has become essentially harmless, at worst causing annoyance by infecting executable files and from antivirus software. Other BIOS viruses remain possible, however;<ref>[http://www.tomshardware.com/news/bios-virus-rootkit-security-backdoor,7400.html New BIOS Virus Withstands HDD Wipes], March 27, 2009 by Marcus Yam - Tom's Hardware US</ref> since most Windows home users without Windows Vista/7's UAC run all applications with administrative privileges, a modern CIH-like virus could in principle still gain access to hardware without first using an exploit. The operating system [[OpenBSD]] prevents all users from having this access and the grsecurity patch for the linux kernel also prevents this direct hardware access by default, the difference being an attacker requiring a much more difficult kernel level exploit or reboot of the machine.

The second BIOS virus was a technique presented by John Heasman, principal security consultant for UK-based Next-Generation Security Software. In 2006, at the Black Hat Security Conference, he showed how to elevate privileges and read physical memory, using malicious procedures that replaced normal [[Advanced Configuration and Power Interface|ACPI]] functions stored in flash memory.

The third BIOS virus was a technique called "Persistent BIOS infection." It appeared in 2009 at the CanSecWest Security Conference in Vancouver, and at the SyScan Security Conference in Singapore. Researchers Anibal Sacco<ref>{{Cite web
| last = Sacco
| first = Anibal
| coauthors = Alfredo Ortéga
| title = Persistent BIOS Infection
| work = [[Exploiting Stuff]]
| accessdate = 2010-02-06
| url = http://exploiting.wordpress.com/2009/03/23/cansecwest-was-great-here-the-presentation-slides/
}}</ref> and Alfredo Ortega, from Core Security Technologies, demonstrated how to insert malicious code into the decompression routines in the BIOS, allowing for nearly full control of the PC at start-up, even before the operating system is booted.

The proof-of-concept does not exploit a flaw in the BIOS implementation, but only involves the normal BIOS flashing procedures. Thus, it requires physical access to the machine, or for the user to be root. Despite these requirements, Ortega underlined the profound implications of his and Sacco's discovery: “We can patch a driver to drop a fully working [[rootkit]]. We even have a little code that can remove or disable antivirus.”<ref>{{Cite web
| last = Fisher
| first = Dennis
| title = Researchers unveil persistent BIOS attack methods
| work = [[Threat Post]]
| accessdate = 2010-02-06
| url = http://threatpost.com/en_us/blogs/researchers-unveil-persistent-bios-attack-methods-031909
| archiveurl= http://web.archive.org/web/20100130001722/http://threatpost.com/en_us/blogs/researchers-unveil-persistent-bios-attack-methods-031909| archivedate= 30 January 2010 <!--DASHBot-->| deadurl= no}}</ref>

Mebromi is a [[Trojan horse (computing)|trojan]] which targets computers with [[AwardBIOS]], [[Microsoft Windows]], and [[antivirus software]] from two Chinese companies: [[Rising Antivirus]] and Jiangmin KV Antivirus.<ref>{{Cite web
| last = Giuliani
| first = Marco
| title = Mebromi: the first BIOS rootkit in the wild
| work = [[blog]]
| accessdate = 2011-09-19
| url = http://blog.webroot.com/2011/09/13/mebromi-the-first-bios-rootkit-in-the-wild/
}}</ref>
<ref>{{Cite web
| last = 
| first = 
| title = 360发布"BMW病毒"技术分析报告
| work = [[blog]]
| accessdate = 2011-09-19
| url = http://bbs.360.cn/4005462/251096134.html
}}</ref>
<ref>{{Cite web
| last = Yuan
| first = Liang
| title = Trojan.Mebromi
| work = [[Threat Response]]
| accessdate = 2011-09-19
| url = http://www.symantec.com/security_response/writeup.jsp?docid=2011-090609-4557-99
}}</ref> Mebromi installs a rootkit which infects the [[master boot record]].

==BIOS Boot Specification==
If the expansion ROM wishes to change the way the system boots (such as from a network device or a SCSI adapter for which the BIOS has no driver code), it can use the ''BIOS Boot Specification'' (BBS) [[Application programming interface|API]] to register its ability to do so. Once the expansion ROMs have registered using the BBS APIs, the user can select among the available boot options from within the BIOS's user interface. This is why most BBS compliant PC BIOS implementations will not allow the user to enter the BIOS's user interface until the expansion ROMs have finished executing and registering themselves with the BBS API.{{Citation needed|date=October 2008}} The specification can be downloaded from the ACPICA website.  The official title is BIOS Boot Specification (Version 1.01, 11 January 1996) and is available here:
<ref>[http://www.acpica.org/documentation/related_documents.php ''BIOS Boot Specification (Version 1.01, 11 January 1996)'']</ref>

==Changing role of the BIOS==

BIOS services are not used by modern multitasking [[GUI]] operating systems after they initially load, so the importance of the primary part of BIOS is greatly reduced from what it was initially. The limitations of the AT-compatible BIOS were its 16-bit processor mode, 1 MByte addressable space and reliance on PC AT hardware.

Some [[operating system]]s, for example [[MS-DOS]], rely on the BIOS to carry out most input/output tasks within the PC.<ref>[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1994%2Fjuly94%2Fpcn0713%2Fpcn0713.asp Smart Computing Article - What Is The BIOS?] - Computing Basics July 1994 • Vol.5 Issue 7</ref> Because the BIOS still runs in 16-bit [[real mode]], calling BIOS services directly is inefficient for protected-mode operating systems. A number of larger, more powerful servers and workstations use a platform-independent [[Open Firmware]] (IEEE-1275) based on the [[Forth (programming language)|Forth]] programming language; it is included with Sun's [[SPARC]] computers, IBM's [[RS/6000]] line, and other [[PowerPC]] systems such as the [[Common Hardware Reference Platform|CHRP]] motherboards. Later x86-based personal computer operating systems, like Windows NT, use their own, native drivers; this makes it much easier to extend support to new hardware.

Later BIOS took on more complex functions, by way of interfaces such as [[Advanced Configuration and Power Interface|ACPI]]; these functions include [[power management]], [[hot swapping]], thermal management.

As of 2011, the BIOS is being replaced by the more complex [[Extensible Firmware Interface]] (EFI) in many new machines. 
EFI is a specification which replaces the runtime interface of the legacy BIOS. Initially written for the Itanium architecture, EFI is now available for [[x86]] and [[x86-64]] platforms; the specification development is driven by The [[Unified EFI Forum]], an industry [[Special Interest Group]]. EFI booting has been supported in only [[Microsoft Windows]] versions supporting [[GUID Partition Table|GPT]],<ref>[http://www.microsoft.com/whdc/device/storage/gpt_faq.mspx Windows and GPT FAQ]</ref> the [[Linux kernel]] 2.6.1 and later, and [[Mac OS X]] on [[Apple–Intel architecture|Intel-based Macs]].<ref>[http://www.intel.com/technology/efi/ Extensible Firmware Interface (EFI) and Unified EFI (UEFI)]</ref> However, the distinction between BIOS and EFI is rarely made in terminology by the average computer user, making BIOS a catch-all term for both systems.

===SLIC===
Some BIOSes contain a "SLIC" (software licensing description table), a digital signature placed inside the BIOS by the manufacturer, for example [[Dell]]. This SLIC is inserted in the ACPI table and contains no active code. Computer manufacturers that distribute OEM versions of Microsoft Windows and Microsoft application software can use the SLIC to authenticate licensing to the OEM Windows Installation disk and/or system [[recovery disc]] containing Windows software. Systems having a SLIC can be preactivated with an OEM product key, and they verify an XML formatted OEM certificate against the SLIC in the BIOS as a means of self-activating (see [[System Locked Preinstallation]]). If a user performs a fresh install of Windows, they will need to have possession of both the OEM key and the digital certificate for their SLIC in order to bypass activation; in practice this is extremely unlikely and hence the only real way this can be achieved is if the user performs a restore using a pre-customised image provided by the OEM.
Cracks for non-genuine Windows distributions usually edit the SLIC or emulate it in order to bypass Windows activation.

===Reprogrammable microcode===
Recent [[Intel]] processors (P6 and P7) have reprogrammable [[microcode]]. The '''BIOS''' may contain patches to the processor code to allow errors in the initial processor code to be fixed, updating the processor microcode each time the system is powered up. Otherwise, an expensive processor swap would be required.<ref>Scott Mueller, ''Upgrading and repairing PCs 15th edition'', Que Publishing, 2003 ISBN 0-7897-2974-1, pages 109-110</ref> For example, the [[Pentium FDIV bug]] became an expensive fiasco for Intel that required a [[product recall]] because the original Pentium did not have patchable microcode.

==The BIOS business==
IBM published the entire listings of the BIOS for its original PC, PC XT, PC AT, and other contemporary PC models, in an appendix of the Technical Reference manual for each machine type.  The effect of the publication of the BIOS listings is that anyone can see exactly what a definitive BIOS does and how it does it. Phoenix Technology was the first company to write a fully compatible and completely legal BIOS through clean-room [[reverse engineering]].

New standards grafted onto the BIOS are usually without complete public documentation or any BIOS listings.  As a result, it is not as easy to learn the intimate details about the many non-IBM additions to BIOS as about the core BIOS services.

Most PC motherboard suppliers license a BIOS "core" and toolkit from a commercial third-party, known as an "independent BIOS vendor" or IBV. The motherboard manufacturer then customizes this BIOS to suit its own hardware. For this reason, updated BIOSes are normally obtained directly from the motherboard manufacturer. Major BIOS vendors include [[American Megatrends]] (AMI), [[Insyde Software]], [[Phoenix Technologies]] and [[Byosoft]]. Former vendors include [[Award Software]] and [[Microid Research]] which were acquired by [[Phoenix Technologies]] in 1998; Phoenix later phased out the Award Brand name. [[General Software]], which was also acquired by Phoenix in 2007, sold BIOS for Intel processor based embedded systems.

The open source community increased their effort to develop a replacement for proprietary BIOSes and their future incarnations with an open sourced counterpart through the [[coreboot]] and [[OpenBIOS]]/[[Open Firmware]] projects. [[Advanced Micro Devices|AMD]] provided product specifications for some chipsets, and [[Google]] is sponsoring the project. [[Motherboard]] manufacturer [[Tyan]] offers [[coreboot]] next to the standard BIOS with their [[Opteron]] line of motherboards. [[Micro-Star International|MSI]] and [[Gigabyte Technology]] have followed suit with the MSI K9ND MS-9282 and MSI K9SD MS-9185 resp. the M57SLI-S4 models.

=== Comparison ===
{| class="wikitable"
! || AwardBIOS || AMIBIOS <!--latest version is 8 --> || Insyde || [[SeaBIOS]] <!--latest version is 1.6.3 -->
|-
! License
| Proprietary || Proprietary || Proprietary || [[GNU Lesser General Public License|LGPL]] v3
|-
! 32-bit PCI BIOS calls
| {{Dunno}} || {{Dunno}} || {{Dunno}} || {{Yes}}
|-
! {{Abbr|AHCI|Advanced Host Controller Interface}}
| {{Yes}} || {{Yes}} || {{Dunno}} || {{Yes}}
|-
! {{Abbr|APM|Advanced Power Management}}
| {{Yes}} || {{Yes}} || {{Yes}} <small>(1.2)</small> || {{Yes}} <small>(1.2)</small>
|-
! {{Abbr|BBS|BIOS Boot Specification}}
| {{Yes}} || {{Yes}} <!-- SATA, IDE, USB, LAN, Floppy --> || {{Yes}} || {{Yes}}
|-
! Boot menu
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
! Compression
| {{Yes}} <small>(LHA)</small> || {{Yes}} <small>(LHA)</small> || {{Yes}} <small>(RLE)</small> || {{Yes}} <small>(LZMA)</small>
|-
! CMOS
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
! {{Abbr|EDD|Enhanced Disk Drive}}
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}} <small>(3.0)</small>
|-
! {{Abbr|ESCD|Extended System Configuration Data}}
| {{Yes}} || {{Yes}} || {{Dunno}} || {{No}}
|-
! Flash from ROM
| {{Dunno}} || {{Yes}} <!-- Qflash, Del-key --> || {{Dunno}} || {{No}}
|-
! Language
| Assembly || Assembly || Assembly || [[C (programming language)|C]]
|- 
! {{Abbr|LBA|Logical Block Addressing}}
| {{Yes}} <small>(48)</small> || {{Yes}} <small>(48)</small> || {{Yes}} || {{Yes}} <small>(48)</small>
|-
! MultiProcessor Specification
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
! Option ROM
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
! Password
| {{Yes}} || {{Yes}} || {{Yes}} || {{No}}
|-
! {{Abbr|PMM|Post Memory Manager}}
| {{Dunno}} || {{Yes}} || {{Dunno}} || {{Yes}}
|-
! Setup screen
| {{Yes}} || {{Yes}} || {{Yes}} || {{No}}
|-
! {{Abbr|SMBIOS|System Management BIOS}}
| {{Yes}} <!-- 2.4 or newer --> || {{Yes}} <!-- 2.5 or newer -->  || {{Yes}} <!-- 2.6 or newer --> || {{Yes}} <small>(2.4)</small>
|-
! Splash screen
| {{Yes}} <!-- 640x480x256 proprietary AWBM (Award Bitmap) format, uses .bmp extension but is not a Windows Bitmap -->
| {{Yes}} <small>(PCX)</small> <!-- 640x480x256 pcx -->
| {{Yes}}
| {{Yes}} <small>(BMP, JPG)</small> <!-- JPEG would use 16 or 24 bpp video mode, BMP use 24bpp mode only -->
|-
! USB booting
| {{Yes}} || {{Yes}} || {{Yes}} <!-- at least usb floppy --> || {{Yes}}
|-
! USB hub
| {{Dunno}} || {{Dunno}} || {{Dunno}} || {{Yes}}
|-
! USB keyboard
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|-
! USB mouse
| {{Yes}} || {{Yes}} || {{Yes}} || {{Yes}}
|}

==See also==
{{Portal|Computing}}
* [[Advanced Configuration and Power Interface]] (ACPI)
* [[Advanced Host Controller Interface]] (AHCI)
* [[ARCS (computing)|ARCS]]
* [[coreboot]], a project whose aim is to create a [[free and open source software|free and open source]] replacement for the BIOS
* [[e820|e820h memory map]]
* [[Extended System Configuration Data]]
* [[Double boot]]
* [[Memtest86]]
* [[Open Firmware]]
* [[Plug and play]]
* [[System Management BIOS]]
* [[VESA BIOS Extensions]]
* [[Video BIOS]]
* [[XDK Debug BIOS]] for Xbox video game console
* [[Y2K|Year 2000 Problem]]

== References ==
<references>
<ref name="Swaine_1997_Entrepreneurship">{{cite journal
|first=Michael
|last=Swaine
|authorlink=Michael Swaine (author)
|date=1997-04-01
|title=Gary Kildall and Collegial Entrepreneurship
|journal=[[Dr. Dobb's Journal]]
|url=http://www.ddj.com/184410428
|accessdate=2006-11-20}}</ref>
<ref name="Kildall_1980_CPM">{{cite web
|title=The History of CP/M, THE EVOLUTION OF AN INDUSTRY: ONE PERSON'S VIEWPOINT
|first=Gary A.
|last=Kildall
|authorlink=Gary Kildall
|date=1980-01
|publisher=[[Dr. Dobb's Journal]] of Computer Calisthenics & Orthodontia
|pages=6–7
|edition=Vol. 5, No. 1, Number 41
|url=http://www.retrotechnology.com/dri/CPM_history_kildall.txt
|accessdate=2013-06-03
|quote=[...] The first commercial licensing of [[CP/M]] took place in 1975 with contracts between [[Digital Systems (Seattle)|Digital Systems]]<!-- a company by [[John Torode (physicist)|John Torode]] --> and [[Omron of America]] for use in their intelligent terminal, and with [[Lawrence Livermore Laboratories]] where CP/M was used to monitor programs in the [[Octopus (network)|Octopus network]]. Little attention was paid to CP/M for about a year. In my spare time, I worked to improve overall facilities [...] By this time, CP/M had been adapted for four different controllers. [...] In 1976, [[Glenn Ewing]] approached me with a problem: [[IMSAI|Imsai]], Incorporated, for whom Glenn consulted, had shipped a large number of disk subsystems with a promise that an operating system would follow. I was somewhat reluctant to adapt CP/M to yet another controller, and thus the notion of a separated Basic I/O System (BIOS) evolved. In principle, the hardware dependent portions of CP/M were concentrated in the BIOS, thus allowing Glenn, or anyone else, to adapt CP/M to the Imsai equipment. Imsai was subsequently licensed to distribute [[CP/M 1.3|CP/M version 1.3]] which eventually evolved into an operating system called [[IMDOS]]. [...]}}</ref>
<ref name="Fischer_2001_Ewing">{{cite web
|title=Gary Kildall's CP/M: Some early CP/M history - 1976-1977
|first=A. Joseph "Joe"
|last=Killian
|authorlink=Joe Killian
|publisher=[[Thomas Fischer (IMSAI)|Thomas "Todd" Fischer]], [[IMSAI]]
|year=2001
|url=http://www.imsai.net/history/imsai_history/cp-m_history.htm
|accessdate=2013-06-03
|quote=[...] When [[IMSAI|we]] failed to produce an operating system in a timely manner, [[Glenn Ewing|Glenn]] started talking with [[Gary Kildall|Gary]] about [[CP/M|CPM]], which Gary had written for [[Intel]] under contract. It took several months of twisting Gary's arm to get Gary to port it to the 8080. The final success came when Glenn talked Gary into just separating the I/O from the rest of it, with Glenn promising to re-write the I/O module for the [[IMSAI 8080]] (which he did). So CPM on the [[IMSAI]] was a joint effort between Glenn and Gary. [...]}}</ref>
<ref name="Kildall_1975_BDOS">{{citation
|title=CP/M 1.1 or 1.2 BIOS and BDOS for Lawrence Livermore Laboratories
|date=1975-06
|first=Gary A.
|last=Kildall
|authorlink=Gary Kildall
|quote=An excerpt of the BDOS.PLM file header in the [[PL/M]] source code of [[CP/M 1.1]] or [[CP/M 1.2]] for [[Lawrence Livermore Laboratories]] (LLL):<pre>[...]
/* C P / M   B A S I C   I / O    S Y S T E M    (B I O S)
                    COPYRIGHT (C) GARY A. KILDALL
                             JUNE, 1975                   */
[...]
/*  B A S I C   D I S K    O P E R A T I N G   S Y S T E M  (B D O S)
                    COPYRIGHT (C) GARY A. KILDALL
                            JUNE, 1975                          */
[...]</pre><!-- some whitespace removed from original citation -->}}</ref>
<ref name="Fraley_2007_Killian">{{cite web
|title=Oral History of Joseph Killian, Interviewed by: Bob Fraley, Edited by: Dag Spicer, Recorded: January 26, 2007, Mountain View, California, CHM Reference number: X3879.2007,
|first1=Bob
|last1=Fraley
|first2=Dag
|last2=Spicer
|date=2007-01-26
|publisher=Computer History Museum
|url=http://archive.computerhistory.org/resources/access/text/2012/10/102658016-05-01-acc.pdf
|accessdate=2013-06-03
|quote=[[Joe Killian|Killian]]: "[...] [[Intel]] had hired [[Gary Kildall|him]] a few months earlier to write a control program monitor to run on their little demo system for 8008 and now 8080. [...] [[Glenn Ewing|Glenn]] knew this and he would be talking with [[Gary Kildall|Gary]], and he started twisting Gary's arm. He said, "Hey Gary, why can't we run this in this IMSAI?" "The I/O's all different, won't run." But Glenn persists and finally makes a deal with Gary. He says, "Okay Gary, if you split out the I/O, I'll write the BIOS, basic I/O's system," and Glenn named it then. "We'll split it out separately. I'll write that part, as long as you can make a division in the program there." And he got Gary to do that and Glenn put those two pieces together and was running Gary's CP/M on an IMSAI. Glenn let us know that, and it wasn't too much later than [[Bill Millard|Bill]] was down there making arrangements with Gary Kildall to license [[CP/M]]. [...] Now that the BIOS is separated out, anybody could write a BIOS for their machine, if it was 8080-based, and run this, so he started selling that separately under the company [[Digital Research]] that he formed and did quite well."}}
</ref>
</references>
{{Reflist|2}}

== Further reading ==
*{{Cite book
|title=IBM Personal Computer Technical Reference
|publisher=[[IBM Corporation]]
<!-- |language=English -->
|edition=Revised
|date=1983-03
<!-- |id=6172234 NB. This is the IBM number of the German issue of the book "IBM Personalcomputer Technisches Handbuch", also 
a revised edition from 1983, therefore left commented out for now. -->}}
*{{Cite book
|title=IBM Personal Computer AT Technical Reference
|publisher=[[IBM Corporation]]
|series=IBM Personal Computer Hardware Reference Library
<!-- |language=English -->
|edition=Revised
|volume=0, 1, 2
|date=1986-03
|origyear=1984-03<!-- 1984-03 is the date of the 1st single-volume edition. The later two-volume edition was first published in 1985-09, and revised in 1986-03. -->
|id=1502494, 6139362, 6183310, 6183312, 6183355, 6280070, 6280099}}
*{{Cite book
|title=System BIOS for IBM PC/XT/AT Computers and Compatibles &mdash; The Complete Guide to ROM-Based System Software
|author=Phoenix Technologies, Ltd.
|authorlink=Phoenix Technologies
|series=Phoenix Technical Reference Series
|publisher=[[Addison Wesley Publishing Company]], Inc.
|edition=1st
|origyear=1987
|year=1989
|isbn=0-201-51806-6}}
*{{Cite book
|title=CBIOS for IBM PS/2 Computers and Compatibles &mdash; The Complete Guide to ROM-Based System Software for DOS
|author=Phoenix Technologies, Ltd.
|authorlink=Phoenix Technologies
|series=Phoenix Technical Reference Series
|publisher=[[Addison Wesley Publishing Company]], Inc.
|edition=1st
|origyear=1987
|year=1989
|isbn=0-201-51804-X}}
*{{Cite book
|title=ABIOS for IBM PS/2 Computers and Compatibles &mdash; The Complete Guide to ROM-Based System Software for OS/2
|author=Phoenix Technologies, Ltd.
|authorlink=Phoenix Technologies
|series=Phoenix Technical Reference Series
|publisher=[[Addison Wesley Publishing Company]], Inc.
|edition=1st
|origyear=1987
|year=1989
|isbn=0-201-51805-8}}
*[[Ralf Brown's Interrupt List]]

==External links==
{{Commons category|Basic Input Output System|the BIOS}}
*{{HowStuffWorks|harvard-extension-schools-computer-science-e-1-understand/2664-changing-pc-bios-settings-video|Changing PC BIOS Settings}}
*{{HowStuffWorks|885-episode-38-flash-your-bios-video|Flashing the BIOS}}
* [http://www.tomshardware.com/2006/01/04/bios_from_a_to_z/ BIOS from A to Z]
* [http://www.tomshardware.com/2005/09/22/bios_for_beginners/ BIOS for Beginners]
* [http://www.phrack.com/archives/66/p66_0x07_Persistent%20BIOS%20infection_by_aLS%20and%20Alfredo.txt Persistent BIOS Infection  - Phrack #66]

=== Specifications ===
* [http://download.intel.com/design/flcomp/applnots/29219202.PDF Preventing BIOS Failures Using Intel Boot Block Flash Memory] (December 1998)
* [http://www.phoenix.com/resources/specs-bbs101.pdf BIOS Boot Specification] 1.01 (January 1996)
* [http://download.intel.com/design/flcomp/support/applnots/29216101.pdf Implementing a Plug and Play BIOS Using Intel's Boot Block Flash Memory] (February 1995)

{{DEFAULTSORT:Bios}}
[[Category:BIOS| ]]
[[Category:Boot loaders]]
[[Category:CP/M technology]]
[[Category:DOS technology]]