{{about|the programming language family||Algol (disambiguation)}}
{{Use dmy dates|date=July 2012}}
{{Infobox programming language
| name = ALGOL
| paradigm = [[procedural programming|procedural]], [[imperative programming|imperative]], [[structured programming|structured]]
| year = 1958
| designer = [[Friedrich L. Bauer|Bauer]], [[Hermann Bottenbruch|Bottenbruch]], [[Heinz Rutishauser|Rutishauser]], [[Klaus Samelson|Samelson]], [[John Backus|Backus]], [[Charles Katz|Katz]], [[Alan Perlis|Perlis]], [[Joseph Henry Wegstein|Wegstein]], [[Peter Naur|Naur]], [[Bernard Vauquois|Vauquois]], [[Adriaan van Wijngaarden|van Wijngaarden]],  [[Michael Woodger|Woodger]], [[Julien Green (computer scientist)|Green]], [[John McCarthy (computer scientist)|McCarthy]]
| implementations =
| influenced = Most subsequent imperative languages (so-called ''ALGOL-like'' languages) <br> e.g. [[Simula]],  [[C (programming language)|C]], [[Combined Programming Language|CPL]], [[Pascal (programming language)|Pascal]], [[Ada (programming language)|Ada]]
}}
'''ALGOL''' (short for '''ALGO'''rithmic '''L'''anguage)<ref>The name of the family is sometimes given in mixed case ([http://www.masswerk.at/algol60/report.htm ''Algol 60'']), and sometimes in all uppercase ([http://burks.brighton.ac.uk/burks/language/other/a68rr/rrtoc.htm ''ALGOL 68'']). For simplicity this article uses ''ALGOL''.</ref> is a [[family (disambiguation)|family]] of [[imperative programming|imperative]] computer [[programming language]]s originally developed in the mid-1950s which greatly influenced many other languages. It was the standard method for [[algorithm]] description used by the [[Association for Computing Machinery|ACM]] in textbooks and academic sources for more than thirty years.<ref>[http://calgo.acm.org/ ''Collected Algorithms of the ACM''] Compressed archives of the algorithms. [[Association for Computing Machinery|ACM]].</ref> In the sense that most modern languages are "algol-like",<ref>{{cite web | url=http://www.eecs.qmul.ac.uk/~ohearn/Algol/intro.html | title=Algol-like languages ,Introduction | author1=P. W. O'Hearn | author2=R. D. Tennent | date=September 1996 | accessdate=17 January 2012}}</ref> it was arguably the most successful of the four high-level programming languages with which it was roughly contemporary: [[Fortran]], [[Lisp (programming language)|Lisp]], and [[COBOL]]. It was designed to avoid some of the perceived problems with [[Fortran|FORTRAN]]<!--using uppercase name because of the sentential context--> and eventually gave rise to many other programming languages, including [[BCPL]], [[B (programming language)|B]], [[Pascal (programming language)|Pascal]], [[PL/I]], [[Simula]], and [[C (programming language)|C]]. ALGOL introduced code blocks and the <code>begin</code> and <code>end</code> pairs for delimiting them and it was also the first language implementing [[nested function]] definitions with [[lexical scope]]. Moreover, it was the first programming language which gave serious attention to formal language definition and through the ''[[Algol 60 Report]]'' introduced [[Backus-Naur Form]], a principal notation for language design.

There were three major specifications:
* [[ALGOL 58]] – originally proposed to be called '''IAL''' (for '''I'''nternational '''A'''lgebraic '''L'''anguage).
* [[ALGOL 60]] – first implemented as ''X1 ALGOL 60'' in mid-1960 – revised 1963<ref>{{cite book
| title=Report on the Algorithmic Language ALGOL 60
| location=Copenhagen
| month=May|year=1960
| doi=10.1145/367236.367262
| issn=0001-0782
| editor1-first=Peter|editor1-last=Naur
| first1=J. W. |last1=Backus
| first2=F. L. |last2=Bauer
| first3=J.    |last3=Green
| first4=C.    |last4=Katz
| first5=J.    |last5=McCarthy
| first6=A. J. |last6=Perlis
| first7=H.    |last7=Rutishauser
| first8=K.    |last8=Samelson
| first9=B.    |last9=Vauquois
| first10=J. H.|last10=Wegstein
| first11=A.   |last11=van Wijngaarden
| first12=M.   |last12=Woodger
}}</ref><ref>{{cite web|title=Revised Report on the Algorithmic Language Algol 60|year=1963|url=http://www.masswerk.at/algol60/report.htm|accessdate=8 June 2007| archiveurl= http://web.archive.org/web/20070625171638/http://www.masswerk.at/algol60/report.htm| archivedate= 25 June 2007 <!--DASHBot-->| deadurl= no}}</ref>
* [[ALGOL 68]] – revised 1973<ref>{{cite web|title=Revised Report on the Algorithmic Language ALGOL 68|year=1973|url=http://vestein.arb-phys.uni-dortmund.de/~wb/RR/rr.pdf|accessdate=25 August 2010}}</ref> – introduced new elements including flexible arrays, slices, parallelism, operator identification, and various extensibility features.
[[Niklaus Wirth]] based his own [[ALGOL W]] on ALGOL 60 before developing [[Pascal (programming language)|Pascal]]. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.

Algol 68 is substantially different from Algol 60 but was not well received, so that in general "Algol" means Algol 60 and dialects thereof.  Fragments of ALGOL-like [[programming language syntax|syntax]] are sometimes still used as [[pseudocode]].

==Important implementations==
The [[ALGOL 58|International Algebraic Language]] (IAL) was extremely influential and generally considered the ancestor of most of the modern programming languages (the so-called Algol-like languages). Additionally, in [[computer science]], '''ALGOL object code''' was a simple and compact and stack-based [[instruction set|instruction set architecture]] mainly used in teaching [[compiler]] construction and other high order language (of which Algol is generally considered the first).

==History==
ALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at [[ETH Zurich]] (cf. [[ALGOL 58]]). It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.

ALGOL was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors other than [[Burroughs Corporation]]. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.

[[John Backus]] developed the [[Backus–Naur Form|Backus normal form]] method of describing programming languages specifically for ALGOL 58. It was revised and expanded by [[Peter Naur]] for ALGOL 60, and at [[Donald Knuth]]'s suggestion renamed [[Backus–Naur Form]].<ref>{{cite journal | last=Knuth | first=Donald E. | year=1964 | title=Backus Normal Form vs Backus Naur Form | journal=Communications of the ACM | volume=7 | issue=12 | pages=735–736 | doi = 10.1145/355588.365140 }}</ref>

Peter Naur: "As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960."<ref name="naur_acm">[http://awards.acm.org/citation.cfm?id=1024454&srt=all&aw=140&ao=AMTURING&yr=2005 ACM Award Citation / Peter Naur], 2005</ref>

The following people attended the meeting in Paris (from  1 to 16 January):
* [[Friedrich L. Bauer]], [[Peter Naur]], [[Heinz Rutishauser]], [[Klaus Samelson]], [[Bernard Vauquois]], [[Adriaan van Wijngaarden]], and [[Michael Woodger]] (from Europe)
* [[John Backus|John W. Backus]], [[Julien Green (computer scientist)|Julien Green]], [[Charles Katz]], [[John McCarthy (computer scientist)|John McCarthy]], [[Alan Perlis|Alan J. Perlis]], and [[Joseph Henry Wegstein]] (from the USA).
Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent."

ALGOL 60 inspired many languages that followed it. [[C. A. R. Hoare]] remarked: "Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors."<ref>[http://www.eecs.umich.edu/~bchandra/courses/papers/Hoare_Hints.pdf "Hints on Programming Language Design"], C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to [[Edsger W. Dijkstra]], also involved in implementing the first ALGOL 60 [[compiler]].)</ref>  The [[Scheme (programming language)|Scheme]] programming language, a variant of [[Lisp (programming language)|Lisp]] that adopted the block structure and lexical scope of ALGOL, also adopted the wording "Revised Report on the Algorithmic Language Scheme" for its standards documents in homage to ALGOL.<ref name="r3rs">{{cite web | author=Jonathan Rees and William Clinger (Editors), Hal Abelson, R. K. Dybvig et al. | title=Revised(3) Report on the Algorithmic Language Scheme, (Dedicated to the Memory of ALGOL 60) | url=http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r3rs-html/r3rs_toc.html |accessdate=20 October 2009}}</ref>

===Algol and programming language research===
As [[Peter Landin]] noted, the language Algol was the first language to combine seamlessly imperative effects with the (call-by-name) [[lambda calculus]]. Perhaps the most elegant formulation of the language is due to [[John C. Reynolds]], and it best exhibits its syntactic and semantic purity. Reynolds's "idealized" Algol also made a convincing methodological argument regarding the suitability of "local" effects in the context of call-by-name languages, to be contrasted with the "global" effects used by call-by-value languages such as [[ML (programming language)|ML]]. The conceptual integrity of the language made it one of the main objects of semantic research, along with [[Programming language for Computable Functions|PCF]] and ML.<ref>[[Peter O'Hearn]] and [[Robert D. Tennent]]. 1996. Algol-Like Languages. Birkhauser Boston Inc., Cambridge, MA, USA.</ref>

===IAL implementations timeline===
To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.<ref>{{cite web | url=http://hopl.murdoch.edu.au/showlanguage.prx?exp=1807 | title=The Encyclopedia of Computer Languages | accessdate=20 January 2012}}</ref>

A discussion of implementation issues of an [[ALGOL 60]] implementations can be found in the article "[http://www.cs.man.ac.uk/CCS/res/res04.htm#d The early days of Algol]" by Nicholas Enticknap and Pat Woodroffe.

{|class="wikitable" border="1" style="border-collapse: collapse;"
|-
!|Name
!|Year
!|Author
!|State
!|Description
!|Target CPU
|-
| ZMMD-implementation|| 1958 || [[Friedrich L. Bauer]], Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch || Germany || implementation of [[ALGOL 58]] || [[Z22 (computer)|Z22]] <br> (later [[Konrad Zuse|Zuse]]'s [[Z23 (computer)|Z23]] was delivered with an Algol 60 compiler)<ref>[http://www.computerhistory.org/projects/zuse_z23/ Computer Museum History], Historical Zuse-Computer Z23, restored by the Konrad Zuse Schule in Hünfeld, for the Computer Museum History Center in Mountain View (California) USA</ref>
|-
|X1 ALGOL 60 || August 1960<ref>{{cite journal|url=http://www.dijkstrascry.com/node/4 |title=Dijkstra's Rallying Cry for Generalization: the Advent of the Recursive Procedure, late 1950s&nbsp;– early 1960s |last=Daylight |first=E. G. |journal=[[The Computer Journal]] |year=2011 |doi=10.1093/comjnl/bxr002}}</ref> || [[Edsger W. Dijkstra]] and [[:nl:Jaap Zonneveld|Jaap A. Zonneveld]] || Netherlands || First implementation of ALGOL 60<ref>{{Cite book | last1 = Kruseman Aretz | first1 = F.E.J. | chapter = The Dijkstra-Zonneveld ALGOL 60 compiler for the Electrologica X1 | title=Software Engineering | series = History of Computer Science | publisher = Centrum Wiskunde & Informatica | place = Kruislaan 413, 1098 SJ Amsterdam | date =30 June 2003 |url = http://oai.cwi.nl/oai/asset/4155/04155D.pdf }}</ref> || [[Electrologica X1]]
|-
|[[Elliott ALGOL]]|| 1960s || [[C. A. R. Hoare]] || UK || Subject of the famous [[Turing test|Turing]] lecture|| [[Elliott 803]] & the Elliott 503
|-
|[[JOVIAL]]|| 1960 || [[Jules Schwarz]] || USA || A [[United States Department of Defense|DOD]] [[High level language|HOL]] prior to [[Ada (programming language)|Ada]] || Various (see article)
|-
|[[Burroughs large systems#ALGOL|Burroughs Algol]] <br> (Several variants)|| 1961 || [[Burroughs Corporation]] (with participation by Hoare, [[Edsger W. Dijkstra|Dijkstra]], and others) || USA || Basis of the [[Burroughs Corporation|Burroughs]] (and now [[Unisys]] [[Burroughs MCP|MCP]] based) computers || [[Burroughs large systems]] <br>and their midrange as well.
|-
|[[Case ALGOL]]|| 1961 || [[Case Western Reserve University|Case Institute of Technology]]<ref>{{cite web|last=Koffman|first=Eliot|title=All I Really Need to KnowI Learned in CS1|url=http://www.temple.edu/cis/directory/tenure/documents/KoffmanSIGCSESlides.pdf|accessdate=20 May 2012}}</ref>  || USA || [[Simula]] was originally contracted as a simulation extension of the Case ALGOL || [[UNIVAC 1107]]
|-
|[[GOGOL]]|| 1961 || [[William McKeeman]] || USA || For [[Odin|ODIN]] time-sharing system || [[PDP-1]]
|-
|[[RegneCentralen ALGOL]]|| 1961 || [[Peter Naur]], [[Jørn Jensen]] || Denmark || Implementation of full Algol 60 || DASK at Regnecentralen
|-
|[[Dartmouth ALGOL 30]]|| 1962 || [[Thomas Eugene Kurtz]] et al. || USA || || [[LGP-30]]
|-
|[[USS 90 Algol]]|| 1962 || [[L. Petrone]] <!-- ? --> || Italy ||
|-
| Algol Translator || 1962 || G. van der Mey and [[Willem van der Poel|W.L. van der Poel]] || Netherlands || Staatsbedrijf der Posterijen, Telegrafie en Telefonie || [[ZEBRA (computer)|ZEBRA]]
|-
|[[Kidsgrove Algol]]|| 1963 || [[F. G. Duncan]] <!-- ? --> || UK || || [[English Electric|English Electric Company]] [[English Electric KDF9|KDF9]]
|-
|[[VALGOL]]|| 1963 || [[Val Schorre]] || USA || A test of the [[META II]] compiler compiler
|-
|[[Whetstone (benchmark)|Whetstone]]|| 1964 || [[Brian Randell]] and L J Russell || UK || Atomic Power Division of English Electric Company. Precursor to [[Ferranti Pegasus]], National Physical Laboratories [[Automatic Computing Engine|ACE]] and [[English Electric DEUCE]] implementations. || English Electric Company [[English Electric KDF9|KDF9]]
|-
|[[NU ALGOL]]|| 1965 || || Norway || || [[UNIVAC]]
|-
|ALGEK|| 1965 || || [[Soviet Union|USSR]] || [[Minsk family of computers|Minsk-22]] || АЛГЭК, based on ALGOL-60 and [[COBOL]] support, for economical tasks
|-
|[[MALGOL]]|| 1966 || publ. A. Viil, M Kotli & M. Rakhendi, || [[Estonian Soviet Socialist Republic|Estonian SSR]] || [[Minsk family of computers|Minsk-22]]
|-
|[[ALGAMS]]|| 1967 || GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science || [[Comecon]] || [[Minsk family of computers|Minsk-22]], later [[ES EVM]], [[BESM]]
|-
|[[ALGOL/ZAM]]|| 1967 || || Poland || || Polish [[ZAM (computer)|ZAM]] computer
|-
|[[Simula|Simula 67]]|| 1967 || [[Ole-Johan Dahl]] and [[Kristen Nygaard]] || Norway || Algol 60 with classes || [[UNIVAC 1107]]
|-
|[http://hopl.murdoch.edu.au/showlanguage.prx?exp=7288&language=Chinese%20Algol Chinese Algol]|| 1972 || || China || Chinese characters, expressed via the Symbol system
|-
|[[DG/L]]|| 1972 || || USA || || DG [[Data General Eclipse|Eclipse]] family of  Computers
|-
|[[S-algol]]|| 1979 || Prof. [[Ron Morrison]] || UK || Addition of orthogonal datatypes with intended use as a teaching language || [[PDP-11]] with a subsequent implementation on the [[Java VM]]
|}

The Burroughs dialects included special Bootstrapping dialects such as [[Executive Systems Problem Oriented Language|ESPOL]] and [[NEWP]].  The latter is still used for Unisys MCP system software.

==Properties==
ALGOL 60 as officially defined had no [[I/O]] facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of ''transput'' (ALGOL 68 parlance for Input/Output) facilities.

ALGOL 60 allowed for two [[evaluation strategy|evaluation strategies]] for [[Parameter (computer science)|parameter]] passing: the common [[call-by-value]], and [[call-by-name]]. Call-by-name had certain limitations in contrast to [[call-by-reference]], making it an undesirable feature in imperative language design. For example, it is impossible in ALGOL 60 to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.<ref>{{cite book | last=Aho | first=Alfred V. | authorlink=Alfred V. Aho | coauthors=[[Ravi Sethi]], [[Jeffrey Ullman|Jeffrey D. Ullman]] | title=[[Dragon Book (computer science)|Compilers: Principles, Techniques, and Tools]] | year=1986 | edition=1st | publisher=Addison-Wesley | isbn=0-201-10194-7}}, Section 7.5, and references therein</ref> Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it's reevaluated. Say i := 1 and A[i] := 2, so every time swap is referenced it'll return the other combination of the values ([1,2], [2,1], [1,2] and so on). Another problematic situation is passing a random function.

However, call-by-name is still beloved of ALGOL implementors for the interesting "[[Thunk (delayed computation)|thunk]]s" that are used to implement it. [[Donald Knuth]] devised the "[[man or boy test]]" to separate compilers that correctly implemented "[[recursion (computer science)|recursion]] and non-local references." This test contains an example of call-by-name.

ALGOL 68 was defined using a two-level grammar formalism invented by [[Adriaan van Wijngaarden]] and which bears his name. [[Van Wijngaarden grammar]]s use a [[context-free grammar]] to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled "semantics" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ''ad hoc'' code attached to the formal language parser.

==Examples and portability issues==

===Code sample comparisons===

====ALGOL 60====
(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for '''integer'''; this is known as [[stropping (programming)|stropping]].)

 '''procedure''' Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
     '''value''' n, m; '''array''' a; '''integer''' n, m, i, k; '''real''' y;
 '''comment''' The absolute greatest element of the matrix a, of size n by m
 is transferred to y, and the subscripts of this element to i and k;
 '''begin''' '''integer''' p, q;
     y := 0; i := k := 1;
     '''for''' p:=1 '''step''' 1 '''until''' n '''do'''
     '''for''' q:=1 '''step''' 1 '''until''' m '''do'''
         '''if''' abs(a[p, q]) > y '''then'''
             '''begin''' y := abs(a[p, q]);
             i := p; k := q
             '''end'''
 '''end''' Absmax

Here's an example of how to produce a [[Table (information)|table]] using Elliott 803 ALGOL.<ref>[http://www.billp.org/ccs/A104/ "803 ALGOL"], the manual for Elliott 803 ALGOL</ref>

  FLOATING POINT ALGOL TEST'
  BEGIN REAL A,B,C,D'
  &nbsp;
  READ D'
  &nbsp;
  FOR A:= 0.0 STEP D UNTIL 6.3 DO
  BEGIN
    PRINT PUNCH(3),££L??'
    B := SIN(A)'
    C := COS(A)'
    PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'
  END'
  END'

PUNCH(3) sends output to the teleprinter rather than the tape punch.<br>
SAMELINE suppresses the carriage return + line feed normally printed between arguments.<br>
ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point.

====ALGOL 68====
The following code samples are ALGOL 68 versions of the above ALGOL 60 code samples.

ALGOL 68 reuses ALGOL 60's [[stropping (programming)|stropping]]. In ALGOL 68's case tokens with the '''bold''' typeface are reserved words, types ('''mode'''s) or operators.

 '''proc''' abs max = ([,]'''real''' a, '''ref''' '''real''' y, '''ref''' '''int''' i, k)'''real''':
 '''comment''' The absolute greatest element of the matrix a, of size ⌈a by 2⌈a
 is transferred to y, and the subscripts of this element to i and k; '''comment'''
 '''begin'''
    '''real''' y := 0; i := ⌊a; k := 2⌊a;
    '''for''' p '''from''' ⌊a '''to''' ⌈a '''do'''
      '''for''' q '''from''' 2⌊a '''to''' 2⌈a '''do'''
        '''if''' '''abs''' a[p, q] > y '''then'''
            y := '''abs''' a[p, q];
            i := p; k := q
        '''fi'''
      '''od'''
    '''od''';
    y
 '''end''' # abs max #
Note: lower (⌊) and upper (⌈) bounds of an array, and array slicing, are directly available to the programmer.

 floating point algol68 test:
 (
   '''real''' a,b,c,d;
   &nbsp;
   printf(($pg$,"Enter d:"));
   read(d);
   &nbsp;
   '''for''' step '''from''' 0 '''while''' a:=step*d; a <= 2*pi '''do'''
     printf($l$);
     b := sin(a);
     c := cos(a);
     printf(($z-d.6d$,a,b,c))
   '''od'''
 )
''printf'' - sends output to the '''file''' ''stand out''.<br>
''printf($p$);'' – selects a ''new page''.<br>
''printf($l$);'' – selects a ''new line''.<br>
''printf(($z-d.6d$,a,b,c))'' – formats output with 1 digit before and 6 after the decimal point.

===Timeline: Hello world===
The variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic [[hello world program]].

====ALGOL 58 (IAL)====
{{main|ALGOL 58}}
ALGOL 58 had no I/O facilities.

====ALGOL 60 family====
{{main|ALGOL 60}}
Since ALGOL 60 had no I/O facilities, there is no portable [[hello world program]] in ALGOL.  The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from [http://www.engin.umd.umich.edu/CIS/course.des/cis400/index.html The Language Guide] at the [[University of Michigan]]-Dearborn Computer and Information
Science Department [http://www.engin.umd.umich.edu/CIS/course.des/cis400/algol/hworld.html Hello world! ALGOL Example Program page].

 BEGIN
   FILE F(KIND=REMOTE);
   EBCDIC ARRAY E[0:11];
   REPLACE E BY "HELLO WORLD!";
   WRITE(F, *, E);
 END.

A simpler program using an inline format:

 BEGIN
   FILE F(KIND=REMOTE);
   WRITE(F, <"HELLO WORLD!">);
 END.

An even simpler program using the Display statement:

 BEGIN DISPLAY("HELLO WORLD!") END.

An alternative example, using Elliott Algol I/O is as follows.  Elliott Algol used different characters for "open-string-quote" and "close-string-quote":

  '''program''' HiFolks;
  '''begin'''
     '''print''' ‘Hello world’;
  '''end''';

Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case.  The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote.  Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter).

   HIFOLKS'
   BEGIN
      PRINT £HELLO WORLD£L??'
   END'

The [[ICT 1900 series]] Algol I/O version allowed input from paper tape or punched card.  Paper tape 'full' mode allowed lower case.  Output was to a line printer.
   'BEGIN'
      'WRITE TEXT'("HELLO WORLD");
   'END'

====ALGOL 68====
{{main|ALGOL 68}}

'''ALGOL 68''' code was published with reserved words typically in lowercase, but bolded or underlined.
 '''begin'''
   printf(($gl$,"Hello, world!"))
 '''end'''
In the language of the "Algol 68 Report" the input/output facilities were collectively called the "[[Input/output|Transput]]".

===Timeline of ALGOL special characters===
{{SpecialChars
| alt        = Decimal Exponent Symbol
| link       = http://mailcom.com/unicode/DecimalExponent.ttf
| special    = Unicode 6.0 "[http://www.unicode.org/charts/PDF/U2300.pdf Miscellaneous Technical]" characters
| fix        = Unicode#External_links
| characters = something like "₁₀" ([http://mailcom.com/unicode/DecimalExponent.ttf Decimal Exponent Symbol U+23E8 TTF])
}}
The ALGOLs were conceived at a time when character sets were diverse and evolving rapidly; also, the ALGOLs were defined so that only ''uppercase'' letters were required.

1960: [[IFIP]] – The Algol 60 language and report included several mathematical symbols which are available on modern computers and operating systems, but, unfortunately, were not supported on most computing systems at the time. For instance: ×, ÷, ≤, ≥, ≠, ¬, ∨, ∧, ⊂, ≡, ␣ and ⏨.

1961 September: ASCII&nbsp;– The [[ASCII]] character set, then in an early stage of development, had the [[\]] (Back slash) character added to it in order to support ALGOL's [[boolean data type|boolean]] operators [[Backslash#History|/\]] and [[\/]].<ref>[http://www.bobbemer.com/BACSLASH.HTM How ASCII Got Its Backslash], Bob Bemer</ref>

1962: [[ALCOR]] – This character set included the unusual "&#x16ed;" <!-- "᛭" --> ([http://www.fileformat.info/info/unicode/char/16ed/index.htm iron/runic cross]) character and the "⏨" ([http://unicode.org/charts/PDF/U2300.pdf Decimal Exponent Symbol]) for floating point notation.  <!-- lower 10 has no [[unicode]] 5.1 equivalent --><ref>{{cite journal | last=Baumann | first=R. | year=1962 | title=ALGOL Manual of the ALCOR Group, Part 1 |journal=Elektronische Rechenanlagen |date=October 1961 | pages=206–212 | language=German| trans_title=ALGOL Manual of the ALCOR Group| accessdate=25 November 2009}}</ref><ref>{{cite journal | last=Baumann | first=R. | year=1962 | title=ALGOL Manual of the ALCOR Group, Part 2 |journal=Elektronische Rechenanlagen |volume=6 | date=December 1961 | pages=259–265 | language=German| trans_title=ALGOL Manual of the ALCOR Group| accessdate=25 November 2009 }}</ref><ref>{{cite journal | last=Baumann | first=R. | year=1962 | title=ALGOL Manual of the ALCOR Group, Part 3 |journal=Elektronische Rechenanlagen |volume=2 | date=April 1962 | language=German| trans_title=ALGOL Manual of the ALCOR Group| accessdate=25 November 2009 }}</ref>

1964: [[GOST]] – The 1964 Russian standard [[GOST 10859]] allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.<ref>{{cite web|title=GOST 10859 standard|url=http://homepages.cwi.nl/~dik/english/codes/stand.html#gost10859|accessdate=5 June 2007| archiveurl= http://web.archive.org/web/20070616201227/http://homepages.cwi.nl/~dik/english/codes/stand.html#gost10859| archivedate= 16 June 2007 <!--DASHBot-->| deadurl= no}}</ref>

1968: The "Algol 68 Report" – used existing ALGOL characters, and further adopted →, ↓, ↑, □, ⌊, ⌈, ⎩, ⎧, ○, ⊥ and ¢ characters which can be found on the [[IBM 2741]] keyboard with "golf-ball" print heads inserted (such as the [[APL syntax and symbols|APL]] golfball). These became available in the mid-1960s while ALGOL 68 was being drafted.  The report was translated into Russian, German, French and Bulgarian, and allowed programming in languages with larger character sets, e.g. [[Cyrillic]] alphabet of the Russian [[BESM|BESM-4]]. All ALGOL's characters are also part of the [[Unicode]] standard and most of them are available in several popular [[font]]s.

2009 October: [[Unicode]] – The "⏨" ([http://unicode.org/charts/PDF/U2300.pdf Decimal Exponent Symbol]) for floating point notation was added to Unicode 5.2 <!-- lower 10 has no [[unicode]] 5.1 equivalent --> for backward compatibility with historic [[Buran (spacecraft)]] ALGOL software.

==See also==
{{col-begin}}
{{col-2}}
* [[Address programming language]]
* [[Atlas Autocode]]
* [[Coral 66]]
* [[Edinburgh IMP]]
* [[Jensen's Device]]
* [[ISWIM]]
{{col-2}}
* [[JOVIAL]]
* [[Tron (video game)]]
* [[NELIAC]]
* [[Simula]]
* [[S-algol]]
* [[Scheme (programming language)]]
{{col-end}}

==References==
{{Reflist|30em}}

==Further reading==
* F.L. Bauer, R. Baumann, M. Feliciano, K. Samelson, ''Introduction to Algol''. Prentice Hall, 1964,  ISBN 0-13-477828-6
* B. Randell and L.J. Russell, ''ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer''. Academic Press, 1964. The design of the '''Whetstone Compiler'''. One of the early published descriptions of implementing a compiler. See the related papers: [http://www.cs.ncl.ac.uk/research/pubs/articles/papers/427.pdf Whetstone Algol Revisited], and [http://www.cs.ncl.ac.uk/publications/books/papers/124.pdf The Whetstone KDF9 Algol Translator] by B. Randell
* E. W, Dijkstra, ''Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60'', report MR 35/61. Mathematisch Centrum, Amsterdam, 1961. [http://www.cs.utexas.edu/users/EWD/MCReps/MR35.PDF]

==External links==
* [http://www.compileonline.com/execute_algol_online.php Algol-68 Execution online using browsers.] by Mohtashim
* [http://www.masswerk.at/algol60/report.htm Revised Report on the Algorithmic Language Algol 60] by Peter Naur, et al. ALGOL definition
* A BNF [http://bernhard.userweb.mwn.de/Algol-BNF.html Syntax summary] of ALGOL 60, from Appendix D of the CDC Algol-60 Version 5 Reference Manual
*[http://www.softwarepreservation.org/projects/ALGOL/ History of ALGOL] at the [[Computer History Museum]]
* [http://www.gnu.org/software/marst/ MARST], a free Algol-to-C translator ([http://www.sfr-fresh.com/unix/misc/marst-2.6.tar.gz:a/marst-2.6/doc/marst.texi User Guide])
* [http://rogerdmoore.ca/JOUR/ AN IMPLEMENTATION OF ALGOL 60 FOR THE FP6000] Discussion of some implementation issues.
* [http://portal.acm.org/ft_gateway.cfm?id=808370&type=pdf&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618 "The European Side of the Last Phase of the Development of ALGOL 60" by Peter Naur]
* Edinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/algolps9.txt BNF for Algol60] and the [http://history.dcs.ed.ac.uk/archive/os/emas/emas2/compilers/algol/algol60fs.imp.html ICL2900 compiler source], [http://history.dcs.ed.ac.uk/archive/os/emas/emas2/compilers/algol/bsyslib.txt-view.html library documentation], and [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/ a considerable test suite] including [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/wichtests_pete1.txt Brian Wichmann's tests.] Also there is a rather superficial [http://history.dcs.ed.ac.uk/archive/os/emas/users/ercc07/emas-2900/palgcons.txt Algol60 to Atlas Autocode source-level translator].
* A Windows Algol [http://www.xs4all.nl/~jmvdveer/algol.html Algol running on Vista win64] system by Marcel van der Veer, Algol 68 Genie works on normal Windows up through the latest.
* [[Eric S. Raymond]]'s [http://www.catb.org/retro/ Retrocomputing Museum], among others a link to the NASE Algol-60 interpreter written in C.
* Stories about The Burroughs B5000 and the People Who Were There [http://ed-thelen.org/comp-hist/B5000-AlgolRWaychoff.html]
* [http://mailcom.com/unicode/DecimalExponent.ttf TrueType font containing U+23E8 Decimal Exponent Symbol].
* [http://vintagebigblue.org/Compilerator/ALGOL/algolCompile.php An online ALGOL68 compiler for small experiments]

{{DEFAULTSORT:Algol}}
[[Category:ALGOL 60 dialect]]
[[Category:Articles with example ALGOL 60 code]]
[[Category:Procedural programming languages]]
[[Category:Structured programming languages]]
[[Category:Systems programming languages]]
[[Category:Programming languages created in the 1950s]]
[[Category:Algol programming language family| ]]