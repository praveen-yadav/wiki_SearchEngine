'''Computer science''' (abbreviated '''CS''' or '''CompSci''') is the [[science|scientific]] and practical approach to [[computation]] and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical processes (or algorithms) that underlie the acquisition, representation, processing, storage, communication of, and access to information, whether such information is encoded in bits and bytes in a computer memory or transcribed engines and protein structures in a human cell.<ref>http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf.</ref> A [[computer scientist]] specializes in the theory of computation and the design of computational systems.<ref>{{cite web |url=http://wordnetweb.princeton.edu/perl/webwn?s=computer%20scientist |title=WordNet Search - 3.1 |publisher=Wordnetweb.princeton.edu |date= |accessdate=2012-05-14}}</ref>

Its subfields can be divided into a variety of theoretical and practical disciplines. Some fields, such as [[computational complexity theory]] (which explores the fundamental properties of [[computational problems]]), are highly abstract, while fields such as [[Computer graphics (computer science)|computer graphics]] emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example, [[programming language theory]] considers various approaches to the description of computation, whilst the study of [[computer programming]] itself investigates various aspects of the use of [[programming language]] and [[complex systems]]. [[Human-computer interaction]] considers the challenges in making computers and computations useful, usable, and [[Computer accessibility|universally accessible]] to [[humans]].

<div class="thumb tright">
<div class="thumbinner" style="width:300px;">
{| style="border:1px solid #ccc;"
|-
| [[File:Lambda lc.svg|144px|alt=large capital lambda|Programming language theory|link=Programming language theory]]
| [[File:Sorting quicksort anim frame.png|144px|alt=Plot of a quicksort algorithm|Computational complexity theory|link=Computational complexity theory]]
|-
| [[File:Utah teapot simple 2.png|144px|alt=Utah teapot representing computer graphics|Computer graphics|link=Computer graphics (computer science)]]
| [[File:3-Tastenmaus Microsoft.jpg|144px|alt=Microsoft Tastenmaus mouse representing human-computer interaction|Human–computer interaction|link=Human–computer interaction]]
|}
<div class="thumbcaption">Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations</div>
</div>
</div>

==History==
{{Main|History of computer science}}
[[File:Babbage40.png|upright|thumb|Charles Babbage is credited with inventing the first mechanical computer.]]
[[File:Ada lovelace.jpg|upright|thumb|Ada Lovelace is credited with writing the first [[algorithm]] intended for processing on a computer.]]
The earliest foundations of what would become computer science predate the invention of the modern [[digital computer]]. Machines for calculating fixed numerical tasks such as the [[abacus]] have existed since antiquity but they only supported the human mind, aiding in computations as complex as multiplication and division.

[[Blaise Pascal]] designed and constructed the first working mechanical calculator, [[Pascal's calculator]], in 1642.<ref>{{cite web|title=Blaise Pascal|url=http://www-history.mcs.st-andrews.ac.uk/Biographies/Pascal.html|publisher=School of Mathematics and Statistics University of St Andrews, Scotland}}</ref>  Two hundred years later, [[Thomas de Colmar]] launched the [[mechanical calculator]] industry<ref>In 1851</ref> when he released his simplified [[arithmometer]], which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. [[Charles Babbage]] started the design of the first ''automatic mechanical calculator'', his [[difference engine]], in 1822, which eventually gave him the idea of the first ''programmable mechanical calculator'', his [[Analytical Engine]].<ref>{{cite web |url=http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |title=Science Museum - Introduction to Babbage |accessdate=2006-09-24 |archiveurl=https://web.archive.org/web/20060908054017/http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |archivedate=2006-09-08}}</ref> He started developing this machine in 1834 and "in less than two years he had sketched out many of the salient features of the modern [[computer]]. A crucial step was the adoption of a punched card system derived from the Jacquard loom"<ref>Anthony Hyman, ''Charles Babbage, pioneer of the computer'', 1982</ref> making it infinitely programmable.<ref>"The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." [[#COLLIER|Bruce Collier]], 1970</ref>  In 1843, during the translation of a French article on the ''analytical engine'', [[Ada Lovelace]] wrote, in one of the many notes she included, an algorithm to compute the [[Bernoulli numbers]], which is considered to be the first computer program.<ref>{{cite web |url=http://www.scottlan.edu/Lriddle/women/ada-love.htm |title=A Selection and Adaptation From Ada's Notes found in "Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA |accessdate=2006-05-04}}</ref> Around 1885, [[Herman Hollerith]] invented the [[tabulating machines|tabulator]] which used [[punched card]]s to process statistical information; eventually his company became part of [[IBM]].  In 1937, one hundred years after Babbage's impossible dream, [[Howard Aiken]] convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business<ref>"In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", [[#AIKEN|Bernard Cohen]], p.44 (2000)</ref> to develop his giant programmable calculator, the [[Harvard Mark I|ASCC/Harvard Mark I]], based on Babbage's ''analytical engine'', which itself used cards and a central computing unit.  When the machine was finished, some hailed it as "Babbage's dream come true".<ref>[[#ORIGINS|Brian Randell]], p.187, 1975</ref>

During the 1940s, as new and more powerful [[computing]] machines were developed, the term ''computer'' came to refer to the machines rather than their human predecessors.<ref>The [[Association for Computing Machinery]] (ACM) was founded in 1947.</ref> As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study [[computation]] in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.<ref name="Denning_cs_discipline"/><ref>{{cite web |url=http://www.cl.cam.ac.uk/conference/EDSAC99/statistics.html |title=Some EDSAC statistics |publisher=Cl.cam.ac.uk |date= |accessdate=2011-11-19}}</ref> The world's first computer science degree program, the [[Cambridge Diploma in Computer Science]], began at the [[University of Cambridge]] [[Cambridge Computer Lab|Computer Laboratory]] in 1953. The first computer science degree program in the United States was formed at [[Purdue University]] in 1962.<ref>[http://www.cs.purdue.edu/feature/conte.html Computer science pioneer Samuel D. Conte dies at 85] July 1, 2002</ref> Since practical computers became available, many applications of computing have become distinct areas of study in their own right.

Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.<ref name="Levy1984">{{cite book |authorlink=Steven Levy |last=Levy |first=Steven |title=[[Hackers: Heroes of the Computer Revolution]] |year=1984 |isbn=0-385-19195-2 |publisher=Doubleday }}</ref> It is the now well-known [[IBM]] brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704<ref>{{cite web|url=http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/222/633 |title=IBM 704 Electronic Data Processing System - CHM Revolution |publisher=Computerhistory.org |date= |accessdate=2013-07-07}}</ref> and later the IBM 709<ref>http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf</ref> computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating...if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again".<ref name="Levy1984"/> During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.

Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use - in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.

===Major achievements===
[[File:Enigma.jpg|thumb|The [[Germany|German]] military used the [[Enigma machine]] (shown here) during [[World War II]] for communication they thought to be secret. The large-scale decryption of Enigma traffic at [[Bletchley Park]] was an important factor that contributed to Allied victory in WWII.<ref name="kahnbook"/>]]

Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to [[science]] and [[society]] - in fact, along with [[electronics]], it is a founding science of the current epoch of human history called the [[Information Age]] and a driver of the [[Information Revolution]], seen as the third major leap in human technological progress after the [[Industrial Revolution]] (1750-1850 CE) and the [[Neolithic Revolution|Agricultural Revolution]] (8000-5000 BCE).

These contributions include:
* The start of the "[[digital revolution]]," which includes the current [[Information Age]] and the [[Internet]].<ref name="bgu">http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf</ref>
* A formal definition of [[computation]] and [[computability]], and proof that there are computationally [[Undecidable problem|unsolvable]] and [[Intractably|intractable]] problems.<ref>{{Cite journal |author=Constable, R.L. |date=March 2000 |url=http://www.cs.cornell.edu/cis-dean/bgu.pdf | title=Computer Science: Achievements and Challenges circa 2000 |format=PDF}}{{dead link|date=July 2013}}</ref>
* The concept of a [[programming language]], a tool for the precise expression of methodological information at various levels of abstraction.<ref>{{cite book |last=Abelson |first=H. |authorlink=Hal Abelson |coauthors=G.J. Sussman with J. Sussman |year=1996 |title=Structure and Interpretation of Computer Programs |edition=2nd |publisher=MIT Press |isbn=0-262-01153-0 |quote=The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called ''procedural epistemology'' — the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects.}}</ref>
* In [[cryptography]], [[Cryptanalysis of the Enigma|breaking the Enigma code]] was an important factor contributing to the Allied victory in World War II.<ref name="kahnbook">[[David Kahn (writer)|David Kahn]], [[The Codebreakers]], 1967, ISBN 0-684-83130-9.</ref>
* [[Scientific computing]] enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the [[Human Genome Project]].<ref name="bgu"/> [[Distributed computing]] projects such as [[Folding@home]] explore [[protein folding]].
* [[Algorithmic trading]] has increased the [[Economic efficiency|efficiency]] and [[Market liquidity|liquidity]] of financial markets by using [[artificial intelligence]], [[machine learning]], and other [[statistics|statistical]] and [[Numerical analysis|numerical]] techniques on a large scale.<ref>[http://www.telegraph.co.uk/money/main.jhtml?xml=/money/2006/08/27/ccsoft27.xml Black box traders are on the march] The Telegraph, August 26, 2006</ref> High frequency algorithmic trading can also exacerbate [[volatility (finance)|volatility]].<ref>{{cite web |url=http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1686004 |title=The Impact of High Frequency Trading on an Electronic Market |doi=10.2139/ssrn.1686004 |publisher=Papers.ssrn.com |date= |accessdate=2012-05-14}}</ref>
* [[Computer graphics]] and [[computer-generated imagery]] have become almost ubiquitous in modern [[entertainment]], particularly in [[television]], [[Filmmaking|cinema]], [[advertising]], [[animation]] and [[video game]]s. Even films that feature no explicit [[computer-generated imagery|CGI]] are usually "filmed" now on [[digital camera]]s, or [[video editing|edited]] or [[Video post-processing|postprocessed]] using a digital video editor. {{Citation needed|date=October 2010}}
* [[Simulation]] of various processes, including computational [[fluid dynamics]], physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are [[SPICE]], as well as software for physical realization of new (or modified) designs. The latter includes essential design software for [[integrated circuit]]s.{{Citation needed|date=October 2010}}
* [[Artificial intelligence]] is becoming increasingly important as it gets more efficient and complex. There are many applications of the AI, some of which can be seen at home, such as [[robotic vacuum cleaner]]s. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and [[Legged Squad Support System|squad support robots]].

==Philosophy==
{{main|Philosophy of computer science}}
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. [[Peter Wegner]] argued that those paradigms are science, technology, and mathematics.<ref>{{cite conference |author=Wegner, P. |title=Research paradigms in computer science |booktitle=Proceedings of the 2nd international Conference on Software Engineering |location=San Francisco, California, United States |date=October 13–15, 1976 |publisher=IEEE Computer Society Press, Los Alamitos, CA}}</ref> [[Peter J. Denning|Peter Denning]]'s working group argued that they are theory, abstraction (modeling), and design.<ref>{{Cite doi |10.1145/63238.63239}}</ref> Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs [[deductive reasoning]]), the "technocratic paradigm" (which might be found in [[engineering]] approaches, most prominently in [[software engineering]]), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of [[natural science]]s, identifiable in some branches of [[artificial intelligence]]).<ref>{{cite doi |10.1007/s11023-007-9060-8}}</ref>

===Name of the field===
The term "computer science" appears in a 1959 article in [[Communications of the ACM]],<ref>
{{cite journal
 |author=Louis Fine
 |year=1959
 |title=The Role of the University in Computers, Data Processing, and Related Fields
 |journal=Communications of the ACM
 |volume=2 |issue=9 |pages=7–14
 |doi=10.1145/368424.368427
}}</ref>
in which Louis Fein argues for the creation of a ''Graduate School in Computer Sciences'' analogous to the creation of [[Harvard Business School]] in 1921,<ref>{{cite web|title=Stanford University Oral History|url=http://library.stanford.edu/guides/stanford-university-oral-history|publisher=Stanford University|accessdate=30-May-2013}}</ref> justifying the name by arguing that, like [[management science]], the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.<ref>id., p. 11</ref>
His efforts, and those of others such as [[numerical analysis|numerical analyst]] [[George Forsythe]], were rewarded: universities went on to create such programs, starting with Purdue in 1962.<ref>[[Donald Knuth]] (1972). ''[http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf "George Forsythe and the Development of Computer Science"]. ''Comms. ACM''.</ref> Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.<ref>Matti Tedre (2006). [http://epublications.uef.fi/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-867-6.pdf The Development of Computer Science: A Sociocultural Perspective], p.260</ref> Certain departments of major universities prefer the term ''computing science'', to emphasize precisely that difference. Danish scientist [[Peter Naur]] suggested the term ''datalogy'',<ref>
{{cite journal
 |author=Peter Naur
 |year=1966
 |title=The science of datalogy
 |journal=Communications of the ACM
 |volume=9 |issue=7 |page=485
 |doi=10.1145/365719.366510
}}</ref> to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the ''Communications of the ACM'' – ''turingineer'', ''turologist'', ''flow-charts-man'', ''applied meta-mathematician'', and ''applied [[epistemology|epistemologist]]''.<ref>Communications of the ACM 1(4):p.6</ref> Three months later in the same journal, ''comptologist'' was suggested, followed next year by ''hypologist''.<ref>Communications of the ACM 2(1):p.4</ref> The term ''computics'' has also been suggested.<ref>IEEE Computer 28(12):p.136</ref> In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. ''informatique'' (French), ''Informatik'' (German), ''informatica'' (Italy), ''informática'' (Spain, Portugal), ''informatika'' ([[Slavic languages]]) or ''pliroforiki'' (''πληροφορική'', which means informatics) in [[Greek language|Greek]]. Similar words have also been adopted in the UK (as in ''the School of Informatics of the University of Edinburgh'').<ref>P. Mounier-Kuhn, ''L’Informatique en France, de la seconde guerre mondiale au Plan Calcul. L’émergence d’une science'', Paris, PUPS, 2010, ch. 3 & 4.</ref>

A folkloric quotation, often attributed to—but almost certainly not first formulated by—[[Edsger Dijkstra]], states that "computer science is no more about computers than astronomy is about telescopes."<ref group=note>See the entry
"[[wikiquote:Computer science|Computer science]]" on Wikiquote for the history of this quotation.</ref> The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of [[computer hardware]] is usually considered part of [[computer engineering]], while the study of commercial [[computer system]]s and their deployment is often called [[information technology]] or [[information systems]]. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as [[philosophy]], [[cognitive science]], [[computational linguistics|linguistics]], [[mathematics]], [[physics]], [[computational statistics|statistics]], and [[logic]].

Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.<ref name="Denning_cs_discipline" /> Early computer science was strongly influenced by the work of mathematicians such as [[Kurt Gödel]] and [[Alan Turing]], and there continues to be a useful interchange of ideas between the two fields in areas such as [[mathematical logic]], [[category theory]], [[domain theory]], and [[algebra]].

The relationship between computer science and [[software engineering]] is a contentious issue, which is further muddied by [[Debates within software engineering|disputes]] over what the term "software engineering" means, and how computer science is defined.<ref>M. Tedre (2011) [http://www.springerlink.com/content/v66j682n57602453/ Computing as a Science: A Survey of Competing Viewpoints], Minds and Machines 21(3), 361-387</ref> [[David Parnas]], taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.<ref>{{Cite doi|10.1023/A:1018949113292}}, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]"</ref>

The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with [[computational science]]. Both types of departments tend to make efforts to bridge the field educationally if not across all research.

==Areas of computer science==
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.<ref name="CSAB1997">{{cite web|author=Computing Sciences Accreditation Board|title=Computer Science as a Profession|url=http://www.csab.org/comp_sci_profession.html |date=28 May 1997| accessdate=2010-05-23 |archiveurl = https://web.archive.org/web/20080617030847/http://www.csab.org/comp_sci_profession.html |archivedate = 2008-06-17}}</ref><ref>{{cite book |author=Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council |title=Computer Science: Reflections on the Field, Reflections from the Field|url=http://www.nap.edu/catalog.php?record_id=11106#toc|publisher=National Academies Press|isbn=978-0-309-09301-9|year=2004}}</ref>
[[CSAB (professional organization)|CSAB]], formerly called ''Computing Sciences Accreditation Board'' – which is made up of representatives of the [[Association for Computing Machinery]] (ACM), and the [[IEEE Computer Society]] (IEEE-CS)<ref>{{cite web |url=http://www.csab.org/ |title=Csab, Inc |publisher=Csab.org |date=2011-08-03 |accessdate=2011-11-19}}</ref> – identifies four areas that it considers crucial to the discipline of computer science: ''theory of computation'', ''algorithms and data structures'', ''programming methodology and languages'', and ''computer elements and architecture''. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, computer-human interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.<ref name="CSAB1997"/>

===Theoretical computer science===
{{main|Theoretical computer science}}
The broader field of [[theoretical computer science]] encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.

====Theory of computation====
{{main|Theory of computation}}
According to [[Peter J. Denning]], the fundamental question underlying computer science is, ''"What can be (efficiently) automated?"''<ref name="Denning_cs_discipline">{{cite journal | last=Denning | first=P.J. | authorlink=Peter J. Denning | year=2000 | title=Computer Science: The Discipline | url=http://www.idi.ntnu.no/emner/dif8916/denning.pdf | journal=Encyclopedia of Computer Science|format=PDF |archiveurl = https://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf |archivedate = 2006-05-25}}</ref> The study of the [[theory of computation]] is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, [[Computability theory (computer science)|computability theory]] examines which computational problems are solvable on various theoretical [[models of computation]]. The second question is addressed by [[computational complexity theory]], which studies the time and space costs associated with different approaches to solving a multitude of computational problems.

The famous "[[P = NP problem|P=NP?]]" problem, one of the [[Millennium Prize Problems]],<ref>[http://www.claymath.org/millennium/P_vs_NP/ Clay Mathematics Institute] P=NP</ref> is an open problem in the theory of computation.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:DFAexample.svg|96px]]
| [[File:Wang tiles.png|96px]]
| '''P = NP''' ?
| '''GNITIRW-TERCES'''
| [[File:Blochsphere.svg|96px]]
|-
| [[Automata theory]]
| [[Computability theory]]
| [[Computational complexity theory]]
| [[Cryptography]]
| [[Quantum computer|Quantum computing theory]]
|}

====Information and coding theory====
{{main|Information theory|Coding theory}}

Information theory is related to the quantification of information. This was developed by [[Claude Shannon|Claude E. Shannon]] to find
fundamental limits on [[signal processing]] operations such as compressing data and on reliably storing and communicating data.<ref>{{cite web|last=P. Collins|first=Graham|title=Claude E. Shannon: Founder of Information Theory|url=http://www.scientificamerican.com/article.cfm?id=claude-e-shannon-founder|publisher=Scientific American, Inc.}}</ref> 
Coding theory is the study of the properties of [[code]]s (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for [[data compression]], [[cryptography]], [[error detection and correction]], and more recently also for [[network coding]]. Codes are studied for the purpose of designing efficient and reliable [[data transmission]] methods.

====Algorithms and data structures====
{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| <math>O(n^2)</math>
| [[File:Sorting quicksort anim.gif|96px]]
| [[File:Singly linked list.png|96px]]
| [[File:SimplexRangeSearching.png|96px]]
|-
| [[Analysis of algorithms]]
| [[Algorithm]]s
| [[Data structures]]
| [[Computational geometry]]
|}

====Programming language theory====
{{main|Programming language theory}}
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of [[programming language]]s and their individual [[Programming language#Elements|features]]. It falls within the discipline of computer science, both depending on and affecting [[mathematics]], [[software engineering]] and [[linguistics]]. It is an active research area, with numerous dedicated academic journals.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| <math>\Gamma\vdash x: \text{Int}</math>
| [[File:Ideal compiler.png|96px]]
| [[File:Python add5 syntax.svg|96px]]
|-
| [[Type theory]]
| [[Compiler design]]
| [[Programming languages]]
|}

====Formal methods====
{{main|Formal methods}}
Formal methods are a particular kind of [[mathematically]] based technique for the [[formal specification|specification]], development and [[formal verification|verification]] of [[software]] and [[computer hardware|hardware]] systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and [[life-critical system]]s, where [[safety]] or [[computer security|security]] is of utmost importance. Formal methods are best described as the application of a fairly broad variety of [[theoretical computer science]] fundamentals, in particular [[logic in computer science|logic]] calculi, [[formal language]]s, [[automata theory]], and [[program semantics]], but also [[type systems]] and [[algebraic data types]] to problems in software and hardware specification and verification.

===Applied computer science===
Applied Computer Science aims at identifying certain Computer Science concepts that can be used directly in solving real world problems.

====Artificial intelligence====
{{main|Artificial intelligence}}
This branch of computer science aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication which are found in humans and animals. From its origins in [[cybernetics]] and in the [[History of artificial intelligence|Dartmouth Conference]] (1956), artificial intelligence (AI) research has been necessarily cross-disciplinary, drawing on areas of expertise such as [[applied mathematics]], [[Mathematical logic|symbolic logic]], [[semiotics]], [[electrical engineering]], [[philosophy of mind]], [[neurophysiology]], and [[social intelligence]]. AI is associated in the popular mind with [[Robotics|robotic development]], but the main field of practical application has been as an embedded component in areas of [[software development]] which require computational understanding and modeling such as finance and economics, data mining and the physical sciences. The starting-point in the late 1940s was [[Alan Turing]]'s question "Can computers think?", and the question remains effectively unanswered although the "[[Turing Test]]" is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:Nicolas P. Rougier's rendering of the human brain.png|96px]]
| [[File:Human eye, rendered from Eye.svg.png|96px]]
| [[File:Corner.png|96px]]
| [[File:KnnClassification.svg|96px]]
|-
| [[Machine learning]]
| [[Computer vision]]
| [[Image processing]]
| [[Pattern recognition]]
|-
| [[File:User-FastFission-brain.gif|96px]]
| [[File:data.png|96px]]
| [[File:sky.png|96px]]
| [[File:earth.png|96px]]
|-
| [[Cognitive science]]
| [[Data mining]]
| [[Evolutionary computation]]
| [[Information retrieval]]
|-
| [[File:neuron.svg|96px]]
| [[File:english.png|96px]]
| [[File:HONDA ASIMO.jpg|64px]]
| [[File:MeningiomaMRISegmentation.png|96px]]
|-
| [[Knowledge representation]]
| [[Natural language processing]]
| [[Robotics]]
| [[Medical Image Computing]]
|}

====Computer architecture and engineering====
{{main|Computer architecture|Computer engineering}}
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.<ref>{{cite web|last=A. Thisted|first=Ronald|title=COMPUTER ARCHITECTURE|url=http://galton.uchicago.edu/~thisted/Distribute/comparch.pdf|publisher=The University of Chicago|accessdate=7 April 1997}}</ref>  The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:NOR ANSI.svg|96px]]
| [[File:Fivestagespipeline.png|96px]]
| [[File:SIMD.svg|96px]]
|-
| [[Digital logic]]
| [[Microarchitecture]]
| [[Multiprocessing]]
|-
| [[File:Operating system placement.svg|96px]]
| [[File:NETWORK-Library-LAN.png|96px]]
| [[File:Emp Tables (Database).PNG|96px]]
| [[File:Padlock.svg|96px]]
|-
| [[Operating systems]]
| [[Computer networking|Computer networks]]
| [[Databases]]
| [[Information security]]
|-
| [[File:Roomba original.jpg|96px]]
| [[File:flowchart.png|96px]]
| [[File:Ideal compiler.png|96px]]
| [[File:Python add5 syntax.svg|96px]]
|-
| [[Ubiquitous computing]]
| [[Systems architecture]]
| [[Compiler design]]
| [[Programming languages]]
|}

====Computer graphics and visualization====
{{main|Computer graphics (computer science)}}
Computer graphics is the study of digital visual contents, and involves synthese and manipulations of image data. The study is connected to many other fields in computer science, including [[computer vision]], [[image processing]], and [[computational geometry]], and is heavily applied in the fields of [[special effects]] and [[video games]].

====Computer security and cryptography====
{{main|Computer security|Cryptography}}
Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.

====Computational science====
[[Computational science]] (or [[scientific computing]]) is the field of study concerned with constructing [[scientific modelling|mathematical models]] and [[numerical analysis|quantitative analysis]] techniques and using computers to analyze and solve [[scientific]] problems. In practical use, it is typically the application of [[computer simulation]] and other forms of [[computation]] to problems in various scientific disciplines.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:Lorenz attractor yb.svg|96px]]
| [[File:Quark wiki.jpg|96px]]
| [[File:Naphthalene-3D-balls.png|96px]]
| [[File:1u04-argonaute.png|96px]]
|-
| [[Numerical analysis]]
| [[Computational physics]]
| [[Computational chemistry]]
| [[Bioinformatics]]
|}

====Computer Networks====
{{main|Computer network}}
This branch of computer science aims to manage networks between computers worldwide.

====Concurrent, parallel and distributed systems====
{{main|Concurrency (computer science)|Distributed computing}}
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including [[Petri nets]], [[process calculi]] and the [[Parallel Random Access Machine]] model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged amongst themselves to achieve a common goal.

====Databases and information retrieval====
{{main|Database|Database management systems}}
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through [[database models]] and [[query languages]].

====Health Informatics====
{{main|Health Informatics }}
Health Informatics in computer science deals with computational techniques for solving problems in health care.

====Information science====
{{main|Information science}}

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:earth.png|96px]]
| [[File:neuron.png|96px]]
| [[File:english.png|96px]]
| [[File:Wacom graphics tablet and pen.png|96px]]
|-
| [[Information retrieval]]
| [[Knowledge representation]]
| [[Natural language processing]]
| [[Human–computer interaction]]
|}

====Software engineering====
{{main|Software engineering}}
Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software— it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 and 2018.

{{see also|computer programming}}

==The great insights of computer science==
According to many{{citation needed|date=October 2013}} computer scientists, there are 3 ''Great Insights of Computer Science'' <ref>http://www.cse.buffalo.edu/~rapaport/computation.html</ref>

* [[Bacon]]'s, [[Leibniz]]'s, [[Boole]]'s, [[Alan Turing]]'s, [[Shannon]]'s, & [[Morse]]'s insight: There are only '''2 objects''' that a computer has to deal with  in order to represent "anything"
:All the information about any computable problem can be represented using only 0 & 1 (or any other bistable pair that can flip-flop between two easily distinguishable states,such as "on"/"off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).
{{see also|digital physics}}
* [[Alan Turing]]'s insight: There are only '''5 actions''' that a computer has to perform  in order to do "anything"
: Every algorithm can be expressed in a language for a computer consisting of only 5 basic instructions:
:: * move left one location
:: * move right one location
:: * print 0 at current-location
:: * print 1 at current-location
:: * erase current-location {{citation needed|date=October 2013}}
{{see also|Turing machine}}
* [[Boehm]] and [[Jacopini]]'s insight: There are only '''3 ways of combining''' these actions (into more complex ones) that are needed in order for a computer to do "anything"
:Only 3 rules are needed to combine any set of basic instructions into more complex ones:
: '''sequence''':
:: first do this; then do that
: ''' selection ''':
:: IF such-&-such is the case, 
:: THEN do this 
:: ELSE do that
: '''repetition''':
:: WHILE such & such is the case DO this

Note that the 3 rules of Boehm's and Jacopini's insight can be further simplified with the use of [[goto]] (which means it's more elementary than [[structured programming]].)

{{see also|Elementary_function_arithmetic#Friedman's_grand_conjecture}}

==Academia==

===Conferences===
{{further|List of computer science conferences}}
Conferences are strategic events of the Academic Research in computer science. During those conferences, researchers from the public and private sectors present their recent work and meet. [[Proceedings]] of these conferences are an important part of the computer science literature.

===Journals===
{{further|:Category:Computer science journals}}

==Education==
Some universities teach computer science as a theoretical study of computation and algorithmic reasoning. These programs often feature the [[theory of computation]], [[analysis of algorithms]], [[formal methods]], [[Concurrency (computer science)|concurrency theory]], [[databases]], [[computer graphics]], and [[systems analysis]], among others. They typically also teach [[computer programming]], but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study. The ACM/IEEE-CS Joint Curriculum Task Force "Computing Curriculum 2005" (and 2008 update) <ref>{{cite web|url=http://www.acm.org/education/curricula-recommendations|title=ACM Curricula Recommendations|accessdate=2012-11-18}}</ref> gives a guideline for university curriculum.

Other colleges and universities, as well as [[secondary school]]s and vocational programs that teach computer science, emphasize the practice of advanced programming rather than the theory of algorithms and computation in their computer science curricula. Such curricula tend to focus on those skills that are important to workers entering the software industry. The process aspects of computer programming are often referred to as [[software engineering]].

While computer science professions increasingly drive the U.S. economy, computer science education is absent in most American K-12 curricula. A report entitled [http://www.acm.org/runningonempty/ "Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age"] was released in October 2010 by [http://www.acm.org/ Association for Computing Machinery (ACM)] and [http://csta.acm.org/ Computer Science Teachers Association (CSTA)], and revealed that only 14 states have adopted significant education standards for high school computer science. The report also found that only nine states count high school computer science courses as a core academic subject in their graduation requirements. In tandem with "Running on Empty", a new non-partisan advocacy coalition - [http://www.computinginthecore.org/ Computing in the Core (CinC)] - was founded to influence federal and state policy, such as the [http://www.govtrack.us/congress/bill.xpd?bill=h111-5929&tab=summary Computer Science Education Act], which calls for grants to states to develop plans for improving computer science education and supporting computer science teachers.

Within the United States a gender gap in computer science education has been observed as well. Research conducted by the WGBH Educational Foundation and the [[Association for Computing Machinery|Association for Computing Machinery (ACM)]] revealed that more than twice as many high school boys considered computer science to be a “very good” or “good” college major than high school girls.<ref>http://www.acm.org/membership/NIC.pdf</ref> In addition, the high school [[Advanced Placement]] (AP) exam for computer science has displayed a disparity in gender. Compared to other AP subjects it has the lowest number of female participants, with a composition of about 15 percent women.<ref>{{cite web|last=Gilbert|first=Alorie|title=Newsmaker: Computer science's gender gap|url=http://news.cnet.com/2008-1082-833090.html|publisher=CNET News}}</ref> This gender gap in computer science is further witnessed at the college level, where 31 percent of undergraduate computer science degrees are earned by women and only 8 percent of computer science faculty consists of women.<ref>{{cite web|last=Dovzan|first=Nicole|title=Examining the Gender Gap in Technology|url=http://sitemaker.umich.edu/356.dovzan/evidence_and_explanations_of_the_gender_gap|publisher=University of Michigan}}</ref> According to an [http://edgaps.org/gaps/number-of-women-in-computer-science-fields-shrinking-can-epistemic-games-help-solve-the-problem/ article] published by the [http://edgaps.org/gaps/ Epistemic Games Group] in August 2012, the number of women graduates in the computer science field has declined to 13 percent.<ref>{{cite web|title=Encouraging the next generation of women in computing|url=http://blogs.msdn.com/b/msr_er/archive/2013/09/03/encouraging-the-next-generation-of-women-in-computing.aspx|publisher=Microsoft Research Connections Team|accessdate=3 Sep 2013}}</ref>

==See also==
{{Main|Outline of computer science}}
{{Portal|Computer science}}
{{colbegin|2}}
* [[Academic genealogy of computer scientists]]
* [[Informatics (academic field)]]
* [[List of academic computer science departments]]
* [[List of computer science conferences]]
* [[List of computer scientists]]
* [[List of important publications in computer science|List of publications in computer science]]
* [[List of pioneers in computer science]]
* [[List of software engineering topics]]
* [[List of unsolved problems in computer science]]
* [[Women in computing]]
{{Wikipedia books link|Computer science}}
{{colend}}

==Notes==
{{reflist|group=note}}

==References==
{{Reflist|30em}}
"Computer Software Engineer." U.S. Bureau of Labor Statistics. U.S. Bureau of Labor Statistics, n.d. Web. 05 Feb. 2013.

==Further reading==
{{refbegin|30em}}
; Overview
* {{cite book|first=Allen B.|last=Tucker|authorlink=Allen B. Tucker|title=Computer Science Handbook|edition=2nd|publisher=Chapman and Hall/CRC|year=2004|isbn=1-58488-360-X}}
** "Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. [...] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles [...]." (Christoph Meinel, ''[[Zentralblatt MATH]]'')
* {{cite book|first=Jan|last=van Leeuwen|authorlink=Jan van Leeuwen|title=Handbook of Theoretical Computer Science|publisher=The MIT Press|year=1994|isbn=0-262-72020-5}}
** "[...] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research [...]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise." (Rocky Ross, ''[[SIGACT News]]'')
* {{cite book|title=Encyclopedia of Computer Science|edition=4th|first1=Anthony|last1=Ralston|authorlink=Anthony Ralston|first2=Edwin D.|last2=Reilly|authorlink2=Edwin D. Reilly|first3=David|last3=Hemmendinger|authorlink3=David Hemmendinger|publisher=Grove's Dictionaries|year=2000|isbn=1-56159-248-X|url=http://portal.acm.org/ralston.cfm}}
** "Since 1976, this has been the definitive reference work on computer, computing, and computer science. [...] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections." (Joe Accardin, Northeastern Illinois Univ., Chicago)
* {{cite book|url=http://books.google.com/books?id=JTYPKxug49IC&printsec=frontcover#v=onepage&q&f=false|title=Milestones in Computer Science and Information Technology|author=Edwin D. Reilly| publisher=Greenwood Publishing Group|year=2003|isbn=978-1-57356-521-9}}
;Selected papers
* {{cite book|first=Donald E.|last=Knuth|authorlink=Donald Knuth|title=Selected Papers on Computer Science|publisher=CSLI Publications, [[Cambridge University Press]]|year=1996}}
*{{cite book|ref=COLLIER|last=Collier|first=Bruce|title=The little engine that could've: The calculating machines of Charles Babbage|publisher=Garland Publishing Inc|isbn=0-8240-0043-9|url=http://robroy.dyndns.info/collier/index.html}}
*{{cite book|ref=HAIKEN|first=Bernard|last=Cohen|title=Howard Aiken, Portrait of a computer pioneer|publisher=The MIT press|year=2000|isbn=978-0-2625317-9-5}}
*{{cite book|title=The origins of Digital computers, Selected Papers|last=Randell|first=Brian |year=1973|publisher=Springer-Verlag|isbn=3-540-06169-X}}

** "Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers — still timely today — but also in their being put together so that ideas expressed at different times complement each other nicely." (N. Bernard, ''Zentralblatt MATH'')
;Articles
* Peter J. Denning. ''[http://portal.acm.org/citation.cfm?id=1053309&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618 Is computer science science?]'', Communications of the ACM, April 2005.
* Peter J. Denning, ''[http://portal.acm.org/citation.cfm?id=971303&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618 Great principles in computing curricula]'', Technical Symposium on Computer Science Education, 2004.
* Research evaluation for computer science, Informatics Europe [http://www.informatics-europe.org/docs/research_evaluation.pdf report]{{dead link|date=July 2013}}. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, ''Research evaluation for computer science'', in [[Communications of the ACM]], vol. 52, no. 4, pp.&nbsp;31–34, April 2009.
; Curriculum and classification
* [[Association for Computing Machinery]]. [http://www.acm.org/class/1998/overview.html 1998 ACM Computing Classification System]. 1998.
* Joint Task Force of Association for Computing Machinery (ACM), [[Association for Information Systems]] (AIS) and [[IEEE Computer Society]] (IEEE-CS). [http://www.acm.org/education/curric_vols/CC2005-March06Final.pdf Computing Curricula 2005: The Overview Report]. September 30, 2005.
* [[Norman Gibbs]], [[Allen Tucker]]. "A model curriculum for a liberal arts degree in computer science". ''Communications of the ACM'', Volume 29 Issue 3, March 1986.
{{refend}}

==External links==
{{Sister project links}}
{{Library resources box}}
* {{dmoz|Computers/Computer_Science/}}
* [http://www.lib.uwaterloo.ca/society/compsci_soc.html Scholarly Societies in Computer Science]
* [http://jeffhuang.com/best_paper_awards.html Best Papers Awards in Computer Science since 1996]
* [http://se.ethz.ch/~meyer/gallery/ Photographs of computer scientists] by [[Bertrand Meyer]]
* [http://www.eecs.berkeley.edu/department/history.shtml EECS.berkeley.edu]
; Bibliography and academic search engines
* [http://citeseerx.ist.psu.edu/ CiteSeer<sup>''x''</sup>] ([[CiteSeerX|article]]): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.
* [http://dblp.uni-trier.de/ DBLP Computer Science Bibliography] ([[Digital Bibliography & Library Project|article]]): computer science bibliography website hosted at Universität Trier, in Germany.
* [http://liinwww.ira.uka.de/bibliography/ The Collection of Computer Science Bibliographies] ([[Collection of Computer Science Bibliographies|article]])
; Professional organizations
* [http://www.acm.org/ Association for Computing Machinery]
* [http://www.computer.org/ IEEE Computer Society]
* [http://www.informatics-europe.org/ Informatics Europe]
; Misc
* [http://cs.stackexchange.com/ Computer Science - Stack Exchange] a community run Question and Answer site for Computer Science
* [http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf What is computer science]
* [http://www.cs.mtu.edu/~john/jenning.pdf Is computer science science?]

{{Computer science}}
{{Technology}}

{{DEFAULTSORT:Computer Science}}
[[Category:Computer science| ]]